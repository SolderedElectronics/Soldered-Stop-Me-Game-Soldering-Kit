
StopMeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002560  08002560  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002560  08002560  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002560  08002560  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000034  0800259c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800259c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ecf  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e3  00000000  00000000  00028f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122ed  00000000  00000000  0002b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaa8  00000000  00000000  0003dcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000742d6  00000000  00000000  0004876d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bca43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d0  00000000  00000000  000bca94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024b4 	.word	0x080024b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080024b4 	.word	0x080024b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <gameSetLeds>:
// Variable for storing current state of LEDs.
uint8_t ledBuffer;

// Functions sets LED states (each bit represents one LED)
void gameSetLeds(uint8_t _led)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
	ledBuffer = _led;
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <gameSetLeds+0x1c>)
 800022e:	1dfa      	adds	r2, r7, #7
 8000230:	7812      	ldrb	r2, [r2, #0]
 8000232:	701a      	strb	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000052 	.word	0x20000052

08000240 <gameUpdateLedBuffer>:

// Send new "screen" to the LEDs
void gameUpdateLedBuffer()
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	// Check if the middle LED needs to change the state (this LED is different for the other LEDs, it's not charlieplexed)
    if (ledBuffer & (1 << 3))
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <gameUpdateLedBuffer+0x50>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	2308      	movs	r3, #8
 800024c:	4013      	ands	r3, r2
 800024e:	d005      	beq.n	800025c <gameUpdateLedBuffer+0x1c>
    {
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 8000250:	23a0      	movs	r3, #160	; 0xa0
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2280      	movs	r2, #128	; 0x80
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	619a      	str	r2, [r3, #24]
 800025a:	e004      	b.n	8000266 <gameUpdateLedBuffer+0x26>
    }
    else
    {
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800025c:	23a0      	movs	r3, #160	; 0xa0
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2280      	movs	r2, #128	; 0x80
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Remove non-charlieplexed LED from the LED buffer for charlieplexing.
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <gameUpdateLedBuffer+0x50>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	b25b      	sxtb	r3, r3
 800026c:	2207      	movs	r2, #7
 800026e:	4013      	ands	r3, r2
 8000270:	b25a      	sxtb	r2, r3
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <gameUpdateLedBuffer+0x50>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	105b      	asrs	r3, r3, #1
 8000278:	b25b      	sxtb	r3, r3
 800027a:	2138      	movs	r1, #56	; 0x38
 800027c:	400b      	ands	r3, r1
 800027e:	b25b      	sxtb	r3, r3
 8000280:	4313      	orrs	r3, r2
 8000282:	b25b      	sxtb	r3, r3
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4b03      	ldr	r3, [pc, #12]	; (8000294 <gameUpdateLedBuffer+0x54>)
 8000288:	701a      	strb	r2, [r3, #0]
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000052 	.word	0x20000052
 8000294:	20000050 	.word	0x20000050

08000298 <gameShowStartAnimation>:

// Function just shows start animation (first all LEDs light up from left to right, then all LEDs turn of in the same way as they light up)
void gameShowStartAnimation()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
    int i;
    int j;
    for (j = 0; j < 2; j++)
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
 80002a2:	e03a      	b.n	800031a <gameShowStartAnimation+0x82>
    {
        for (i = 0; i < 7; i++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	e014      	b.n	80002d4 <gameShowStartAnimation+0x3c>
        {
            ledBuffer |= (1 << i);
 80002aa:	2201      	movs	r2, #1
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	409a      	lsls	r2, r3
 80002b0:	0013      	movs	r3, r2
 80002b2:	b25a      	sxtb	r2, r3
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <gameShowStartAnimation+0x9c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	b25b      	sxtb	r3, r3
 80002ba:	4313      	orrs	r3, r2
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <gameShowStartAnimation+0x9c>)
 80002c2:	701a      	strb	r2, [r3, #0]
            gameUpdateLedBuffer();
 80002c4:	f7ff ffbc 	bl	8000240 <gameUpdateLedBuffer>
            HAL_Delay(70);
 80002c8:	2046      	movs	r0, #70	; 0x46
 80002ca:	f000 fcf9 	bl	8000cc0 <HAL_Delay>
        for (i = 0; i < 7; i++)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3301      	adds	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b06      	cmp	r3, #6
 80002d8:	dde7      	ble.n	80002aa <gameShowStartAnimation+0x12>
        }
        for (i = 0; i < 7; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	e016      	b.n	800030e <gameShowStartAnimation+0x76>
        {
            ledBuffer &= ~(1 << i);
 80002e0:	2201      	movs	r2, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	409a      	lsls	r2, r3
 80002e6:	0013      	movs	r3, r2
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	43db      	mvns	r3, r3
 80002ec:	b25b      	sxtb	r3, r3
 80002ee:	4a11      	ldr	r2, [pc, #68]	; (8000334 <gameShowStartAnimation+0x9c>)
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	b252      	sxtb	r2, r2
 80002f4:	4013      	ands	r3, r2
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <gameShowStartAnimation+0x9c>)
 80002fc:	701a      	strb	r2, [r3, #0]
            gameUpdateLedBuffer();
 80002fe:	f7ff ff9f 	bl	8000240 <gameUpdateLedBuffer>
            HAL_Delay(70);
 8000302:	2046      	movs	r0, #70	; 0x46
 8000304:	f000 fcdc 	bl	8000cc0 <HAL_Delay>
        for (i = 0; i < 7; i++)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b06      	cmp	r3, #6
 8000312:	dde5      	ble.n	80002e0 <gameShowStartAnimation+0x48>
    for (j = 0; j < 2; j++)
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	ddc1      	ble.n	80002a4 <gameShowStartAnimation+0xc>
        }
    }
    HAL_Delay(700);
 8000320:	23af      	movs	r3, #175	; 0xaf
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fccb 	bl	8000cc0 <HAL_Delay>
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b002      	add	sp, #8
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	20000052 	.word	0x20000052

08000338 <gameShowSuccAnimation>:

// Function shows success animation (blinks with a LED in the middle)
void gameShowSuccAnimation(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
    int i;
    ledBuffer = 0;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <gameShowSuccAnimation+0x54>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
    gameUpdateLedBuffer();
 8000344:	f7ff ff7c 	bl	8000240 <gameUpdateLedBuffer>
    HAL_Delay(175);
 8000348:	20af      	movs	r0, #175	; 0xaf
 800034a:	f000 fcb9 	bl	8000cc0 <HAL_Delay>
    for (i = 0; i < 1; i++)
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e012      	b.n	800037a <gameShowSuccAnimation+0x42>
    {
        ledBuffer = 1 << 3;
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <gameShowSuccAnimation+0x54>)
 8000356:	2208      	movs	r2, #8
 8000358:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 800035a:	f7ff ff71 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(175);
 800035e:	20af      	movs	r0, #175	; 0xaf
 8000360:	f000 fcae 	bl	8000cc0 <HAL_Delay>
        ledBuffer = 0;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <gameShowSuccAnimation+0x54>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 800036a:	f7ff ff69 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(175);
 800036e:	20af      	movs	r0, #175	; 0xaf
 8000370:	f000 fca6 	bl	8000cc0 <HAL_Delay>
    for (i = 0; i < 1; i++)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	dde9      	ble.n	8000354 <gameShowSuccAnimation+0x1c>
    }
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	20000052 	.word	0x20000052

08000390 <gameShowFailAnimation>:

// Function shows fail animation (when player misses LED). It just blinks few times with the missed LED.
void gameShowFailAnimation(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 2; i++)
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	e012      	b.n	80003c2 <gameShowFailAnimation+0x32>
    {
        ledBuffer = 0b01111111;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <gameShowFailAnimation+0x44>)
 800039e:	227f      	movs	r2, #127	; 0x7f
 80003a0:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 80003a2:	f7ff ff4d 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(175);
 80003a6:	20af      	movs	r0, #175	; 0xaf
 80003a8:	f000 fc8a 	bl	8000cc0 <HAL_Delay>
        ledBuffer = 0;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <gameShowFailAnimation+0x44>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 80003b2:	f7ff ff45 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(175);
 80003b6:	20af      	movs	r0, #175	; 0xaf
 80003b8:	f000 fc82 	bl	8000cc0 <HAL_Delay>
    for (i = 0; i < 2; i++)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3301      	adds	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	dde9      	ble.n	800039c <gameShowFailAnimation+0xc>
    }
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b002      	add	sp, #8
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	20000052 	.word	0x20000052

080003d8 <gameShowResult>:

// Function shows result of the game. L1 shows hundreds of the result, L2 LED show tenths of the result.
// Each LED blink means the result must me contued up.
// For example, L1 blinks just once, L2 blinks 3 times, and L3 five times, total score is 135.
void gameShowResult(uint8_t _r)
{
 80003d8:	b5b0      	push	{r4, r5, r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	0002      	movs	r2, r0
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	701a      	strb	r2, [r3, #0]
    uint8_t _blinks;
    uint8_t i;

    // First show hundreds of the score
    _blinks = _r / 100;
 80003e4:	230e      	movs	r3, #14
 80003e6:	18fc      	adds	r4, r7, r3
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2164      	movs	r1, #100	; 0x64
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff fe8a 	bl	8000108 <__udivsi3>
 80003f4:	0003      	movs	r3, r0
 80003f6:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < _blinks; i++)
 80003f8:	230f      	movs	r3, #15
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
 8000400:	e015      	b.n	800042e <gameShowResult+0x56>
    {
        ledBuffer = 1 << 0;
 8000402:	4b3f      	ldr	r3, [pc, #252]	; (8000500 <gameShowResult+0x128>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 8000408:	f7ff ff1a 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(SCORE_BLINK_ON);
 800040c:	20c8      	movs	r0, #200	; 0xc8
 800040e:	f000 fc57 	bl	8000cc0 <HAL_Delay>
        ledBuffer = 0;
 8000412:	4b3b      	ldr	r3, [pc, #236]	; (8000500 <gameShowResult+0x128>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 8000418:	f7ff ff12 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(SCORE_BLINK_OFF);
 800041c:	20c8      	movs	r0, #200	; 0xc8
 800041e:	f000 fc4f 	bl	8000cc0 <HAL_Delay>
    for (i = 0; i < _blinks; i++)
 8000422:	210f      	movs	r1, #15
 8000424:	187b      	adds	r3, r7, r1
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	187b      	adds	r3, r7, r1
 800042a:	3201      	adds	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	250f      	movs	r5, #15
 8000430:	197a      	adds	r2, r7, r5
 8000432:	240e      	movs	r4, #14
 8000434:	193b      	adds	r3, r7, r4
 8000436:	7812      	ldrb	r2, [r2, #0]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	429a      	cmp	r2, r3
 800043c:	d3e1      	bcc.n	8000402 <gameShowResult+0x2a>
    }

    // Show tenths of the result
    _blinks = _r / 10 % 10;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	210a      	movs	r1, #10
 8000444:	0018      	movs	r0, r3
 8000446:	f7ff fe5f 	bl	8000108 <__udivsi3>
 800044a:	0003      	movs	r3, r0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	193c      	adds	r4, r7, r4
 8000450:	210a      	movs	r1, #10
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff fede 	bl	8000214 <__aeabi_uidivmod>
 8000458:	000b      	movs	r3, r1
 800045a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < _blinks; i++)
 800045c:	197b      	adds	r3, r7, r5
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
 8000462:	e015      	b.n	8000490 <gameShowResult+0xb8>
    {
        ledBuffer = 1 << 1;
 8000464:	4b26      	ldr	r3, [pc, #152]	; (8000500 <gameShowResult+0x128>)
 8000466:	2202      	movs	r2, #2
 8000468:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 800046a:	f7ff fee9 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(SCORE_BLINK_ON);
 800046e:	20c8      	movs	r0, #200	; 0xc8
 8000470:	f000 fc26 	bl	8000cc0 <HAL_Delay>
        ledBuffer = 0;
 8000474:	4b22      	ldr	r3, [pc, #136]	; (8000500 <gameShowResult+0x128>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 800047a:	f7ff fee1 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(SCORE_BLINK_OFF);
 800047e:	20c8      	movs	r0, #200	; 0xc8
 8000480:	f000 fc1e 	bl	8000cc0 <HAL_Delay>
    for (i = 0; i < _blinks; i++)
 8000484:	210f      	movs	r1, #15
 8000486:	187b      	adds	r3, r7, r1
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	187b      	adds	r3, r7, r1
 800048c:	3201      	adds	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	250f      	movs	r5, #15
 8000492:	197a      	adds	r2, r7, r5
 8000494:	210e      	movs	r1, #14
 8000496:	187b      	adds	r3, r7, r1
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	d3e1      	bcc.n	8000464 <gameShowResult+0x8c>
    }

    // Show the last digit of the result
    _blinks = _r % 10;
 80004a0:	187c      	adds	r4, r7, r1
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	210a      	movs	r1, #10
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff feb3 	bl	8000214 <__aeabi_uidivmod>
 80004ae:	000b      	movs	r3, r1
 80004b0:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < _blinks; i++)
 80004b2:	197b      	adds	r3, r7, r5
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e015      	b.n	80004e6 <gameShowResult+0x10e>
    {
        ledBuffer = 1 << 2;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <gameShowResult+0x128>)
 80004bc:	2204      	movs	r2, #4
 80004be:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 80004c0:	f7ff febe 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(SCORE_BLINK_ON);
 80004c4:	20c8      	movs	r0, #200	; 0xc8
 80004c6:	f000 fbfb 	bl	8000cc0 <HAL_Delay>
        ledBuffer = 0;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <gameShowResult+0x128>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
        gameUpdateLedBuffer();
 80004d0:	f7ff feb6 	bl	8000240 <gameUpdateLedBuffer>
        HAL_Delay(SCORE_BLINK_OFF);
 80004d4:	20c8      	movs	r0, #200	; 0xc8
 80004d6:	f000 fbf3 	bl	8000cc0 <HAL_Delay>
    for (i = 0; i < _blinks; i++)
 80004da:	210f      	movs	r1, #15
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	230f      	movs	r3, #15
 80004e8:	18fa      	adds	r2, r7, r3
 80004ea:	230e      	movs	r3, #14
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d3e1      	bcc.n	80004ba <gameShowResult+0xe2>
    }
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000500:	20000052 	.word	0x20000052

08000504 <gameTimerISR>:

// Function is for charlieplexing LEDs (this function is called periodically with the HW timer)
void gameTimerISR()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    // Because we need to do this as quickly as possible, so we need to use registers

    // First, set all outputs connected to LEDs as inputs. Do not use HAL here, it's too slow.
	myLedPins[0].port->MODER &= ~(0b00000011 << (2 * myLedPins[0].pin));
 8000508:	4b61      	ldr	r3, [pc, #388]	; (8000690 <gameTimerISR+0x18c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b60      	ldr	r3, [pc, #384]	; (8000690 <gameTimerISR+0x18c>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	2103      	movs	r1, #3
 8000516:	4099      	lsls	r1, r3
 8000518:	000b      	movs	r3, r1
 800051a:	43db      	mvns	r3, r3
 800051c:	0019      	movs	r1, r3
 800051e:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <gameTimerISR+0x18c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	400a      	ands	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
	myLedPins[1].port->MODER &= ~(0b00000011 << (2 * myLedPins[1].pin));
 8000526:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <gameTimerISR+0x18c>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b58      	ldr	r3, [pc, #352]	; (8000690 <gameTimerISR+0x18c>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2103      	movs	r1, #3
 8000534:	4099      	lsls	r1, r3
 8000536:	000b      	movs	r3, r1
 8000538:	43db      	mvns	r3, r3
 800053a:	0019      	movs	r1, r3
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <gameTimerISR+0x18c>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	400a      	ands	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
	myLedPins[2].port->MODER &= ~(0b00000011 << (2 * myLedPins[2].pin));
 8000544:	4b52      	ldr	r3, [pc, #328]	; (8000690 <gameTimerISR+0x18c>)
 8000546:	691b      	ldr	r3, [r3, #16]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <gameTimerISR+0x18c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	2103      	movs	r1, #3
 8000552:	4099      	lsls	r1, r3
 8000554:	000b      	movs	r3, r1
 8000556:	43db      	mvns	r3, r3
 8000558:	0019      	movs	r1, r3
 800055a:	4b4d      	ldr	r3, [pc, #308]	; (8000690 <gameTimerISR+0x18c>)
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	400a      	ands	r2, r1
 8000560:	601a      	str	r2, [r3, #0]

    // Then check if you need to light up an LED
    if (ledBufferCharile & (1 << charlieplexCounter))
 8000562:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <gameTimerISR+0x190>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	001a      	movs	r2, r3
 800056a:	4b4b      	ldr	r3, [pc, #300]	; (8000698 <gameTimerISR+0x194>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	411a      	asrs	r2, r3
 8000572:	0013      	movs	r3, r2
 8000574:	2201      	movs	r2, #1
 8000576:	4013      	ands	r3, r2
 8000578:	d077      	beq.n	800066a <gameTimerISR+0x166>
    {
    	// Set one GPIO to the high and other to the low state
    	myLedPins[myLedPairs[charlieplexCounter].gpioHigh].port->BSRR = (1 << (myLedPins[myLedPairs[charlieplexCounter].gpioHigh].pin));
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <gameTimerISR+0x194>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	001a      	movs	r2, r3
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <gameTimerISR+0x198>)
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	5cd3      	ldrb	r3, [r2, r3]
 8000588:	4a41      	ldr	r2, [pc, #260]	; (8000690 <gameTimerISR+0x18c>)
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	3304      	adds	r3, #4
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2201      	movs	r2, #1
 8000594:	409a      	lsls	r2, r3
 8000596:	0011      	movs	r1, r2
 8000598:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <gameTimerISR+0x194>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	001a      	movs	r2, r3
 80005a0:	4b3e      	ldr	r3, [pc, #248]	; (800069c <gameTimerISR+0x198>)
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	5cd3      	ldrb	r3, [r2, r3]
 80005a6:	001a      	movs	r2, r3
 80005a8:	4b39      	ldr	r3, [pc, #228]	; (8000690 <gameTimerISR+0x18c>)
 80005aa:	00d2      	lsls	r2, r2, #3
 80005ac:	58d3      	ldr	r3, [r2, r3]
 80005ae:	000a      	movs	r2, r1
 80005b0:	619a      	str	r2, [r3, #24]
    	myLedPins[myLedPairs[charlieplexCounter].gpioLow].port->BRR = (1 << (myLedPins[myLedPairs[charlieplexCounter].gpioLow].pin));
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <gameTimerISR+0x194>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4a38      	ldr	r2, [pc, #224]	; (800069c <gameTimerISR+0x198>)
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	3301      	adds	r3, #1
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4a33      	ldr	r2, [pc, #204]	; (8000690 <gameTimerISR+0x18c>)
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	18d3      	adds	r3, r2, r3
 80005c8:	3304      	adds	r3, #4
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0011      	movs	r1, r2
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <gameTimerISR+0x194>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4a30      	ldr	r2, [pc, #192]	; (800069c <gameTimerISR+0x198>)
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	001a      	movs	r2, r3
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <gameTimerISR+0x18c>)
 80005e6:	00d2      	lsls	r2, r2, #3
 80005e8:	58d3      	ldr	r3, [r2, r3]
 80005ea:	000a      	movs	r2, r1
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28

    	// Set GPIOs as outputs.
    	myLedPins[myLedPairs[charlieplexCounter].gpioHigh].port->MODER |= (1 << (myLedPins[myLedPairs[charlieplexCounter].gpioHigh].pin) * 2);
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <gameTimerISR+0x194>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	001a      	movs	r2, r3
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <gameTimerISR+0x198>)
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	4a24      	ldr	r2, [pc, #144]	; (8000690 <gameTimerISR+0x18c>)
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	18d3      	adds	r3, r2, r3
 8000602:	3304      	adds	r3, #4
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	2201      	movs	r2, #1
 800060a:	409a      	lsls	r2, r3
 800060c:	0011      	movs	r1, r2
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <gameTimerISR+0x194>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	001a      	movs	r2, r3
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <gameTimerISR+0x198>)
 8000618:	0052      	lsls	r2, r2, #1
 800061a:	5cd3      	ldrb	r3, [r2, r3]
 800061c:	001a      	movs	r2, r3
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <gameTimerISR+0x18c>)
 8000620:	00d2      	lsls	r2, r2, #3
 8000622:	58d3      	ldr	r3, [r2, r3]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
    	myLedPins[myLedPairs[charlieplexCounter].gpioLow].port->MODER |= (1 << (myLedPins[myLedPairs[charlieplexCounter].gpioLow].pin) * 2);
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <gameTimerISR+0x194>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <gameTimerISR+0x198>)
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	18d3      	adds	r3, r2, r3
 8000636:	3301      	adds	r3, #1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <gameTimerISR+0x18c>)
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	18d3      	adds	r3, r2, r3
 8000640:	3304      	adds	r3, #4
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	2201      	movs	r2, #1
 8000648:	409a      	lsls	r2, r3
 800064a:	0011      	movs	r1, r2
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <gameTimerISR+0x194>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <gameTimerISR+0x198>)
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	18d3      	adds	r3, r2, r3
 8000658:	3301      	adds	r3, #1
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	001a      	movs	r2, r3
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <gameTimerISR+0x18c>)
 8000660:	00d2      	lsls	r2, r2, #3
 8000662:	58d3      	ldr	r3, [r2, r3]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
    }

    // Go to the next LED
    charlieplexCounter++;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <gameTimerISR+0x194>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <gameTimerISR+0x194>)
 8000676:	701a      	strb	r2, [r3, #0]

    // There are only 5 charileplexed LED.
    if (charlieplexCounter > 5)
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <gameTimerISR+0x194>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b05      	cmp	r3, #5
 8000680:	d902      	bls.n	8000688 <gameTimerISR+0x184>
        charlieplexCounter = 0;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <gameTimerISR+0x194>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000000 	.word	0x20000000
 8000694:	20000050 	.word	0x20000050
 8000698:	20000051 	.word	0x20000051
 800069c:	20000018 	.word	0x20000018

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fa8f 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f8c7 	bl	800083c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // REMOVE THIS DELAY IN THE FINAL CODE (for debug purpose only)
  HAL_Delay(8000);
 80006ae:	23fa      	movs	r3, #250	; 0xfa
 80006b0:	015b      	lsls	r3, r3, #5
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fb04 	bl	8000cc0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f94e 	bl	8000958 <MX_GPIO_Init>
  MX_TIM14_Init();
 80006bc:	f000 f902 	bl	80008c4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Start the Timer Interrupt (needed for LED charlieplexing)
  HAL_TIM_Base_Start_IT(&htim14);
 80006c0:	4b59      	ldr	r3, [pc, #356]	; (8000828 <main+0x188>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 f94a 	bl	800195c <HAL_TIM_Base_Start_IT>

  // Show start animation
  gameShowStartAnimation();
 80006c8:	f7ff fde6 	bl	8000298 <gameShowStartAnimation>
  while (1)
  {
	    uint32_t timeout;

	    // Light up only one LED (one dot)
	    gameSetLeds(1 << i);
 80006cc:	4b57      	ldr	r3, [pc, #348]	; (800082c <main+0x18c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2201      	movs	r2, #1
 80006d2:	409a      	lsls	r2, r3
 80006d4:	0013      	movs	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fda1 	bl	8000220 <gameSetLeds>

	    // Update charlieplex LED buffer
	    gameUpdateLedBuffer();
 80006de:	f7ff fdaf 	bl	8000240 <gameUpdateLedBuffer>

	    // If dot got to the end, reverse direction
	    if (i >= 6)
 80006e2:	4b52      	ldr	r3, [pc, #328]	; (800082c <main+0x18c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	dd02      	ble.n	80006f0 <main+0x50>
	    {
	        down = 1;
 80006ea:	4b51      	ldr	r3, [pc, #324]	; (8000830 <main+0x190>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
	    }

	    // If the dot got to the start, again reverse direction again
	    if (i == 0)
 80006f0:	4b4e      	ldr	r3, [pc, #312]	; (800082c <main+0x18c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <main+0x5e>
	    {
	        down = 0;
 80006f8:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <main+0x190>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	    }

	    // Get millisecond timestamp
	    timeout = HAL_GetTick();
 80006fe:	f000 fad5 	bl	8000cac <HAL_GetTick>
 8000702:	0003      	movs	r3, r0
 8000704:	607b      	str	r3, [r7, #4]

	    // Wait until the button is pressed, or until delay has passed (dot needs to be moved)
	    while (((uint32_t)(HAL_GetTick() - timeout) <= delayTime) && (HAL_GPIO_ReadPin(NET_D1_PORT, 1 << NET_D1_PIN) == GPIO_PIN_SET));
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	f000 fad0 	bl	8000cac <HAL_GetTick>
 800070c:	0002      	movs	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	4a48      	ldr	r2, [pc, #288]	; (8000834 <main+0x194>)
 8000714:	8812      	ldrh	r2, [r2, #0]
 8000716:	4293      	cmp	r3, r2
 8000718:	d80a      	bhi.n	8000730 <main+0x90>
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	019a      	lsls	r2, r3, #6
 800071e:	23a0      	movs	r3, #160	; 0xa0
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fd41 	bl	80011ac <HAL_GPIO_ReadPin>
 800072a:	0003      	movs	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d0eb      	beq.n	8000708 <main+0x68>

	    // If timeout didn't occur (delay time is still not passed), that means button is pressed
	    if ((uint32_t)(HAL_GetTick() - timeout) <= delayTime)
 8000730:	f000 fabc 	bl	8000cac <HAL_GetTick>
 8000734:	0002      	movs	r2, r0
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4a3e      	ldr	r2, [pc, #248]	; (8000834 <main+0x194>)
 800073c:	8812      	ldrh	r2, [r2, #0]
 800073e:	4293      	cmp	r3, r2
 8000740:	d861      	bhi.n	8000806 <main+0x166>
	    {
	    	// Wait until the button is released
	        while (HAL_GPIO_ReadPin(NET_D1_PORT, 1 << NET_D1_PIN) == GPIO_PIN_RESET)
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	019a      	lsls	r2, r3, #6
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fd2c 	bl	80011ac <HAL_GPIO_ReadPin>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d0f5      	beq.n	8000744 <main+0xa4>
	           ;

	        // If player stopped on the 4th LED (i = 3), it stopped on blue LED, count that as succcess
	        if (i == 3)
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <main+0x18c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b03      	cmp	r3, #3
 800075e:	d130      	bne.n	80007c2 <main+0x122>
	        {
	        	// Show animation for success, add the points.
	            gameShowSuccAnimation();
 8000760:	f7ff fdea 	bl	8000338 <gameShowSuccAnimation>
	            score++;
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <main+0x198>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <main+0x198>)
 800076e:	701a      	strb	r2, [r3, #0]

	            // Calculate new delay time (as player scores more points, delays are smaller and smaller)
	            if (delayTime > 100)
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <main+0x194>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b64      	cmp	r3, #100	; 0x64
 8000776:	d906      	bls.n	8000786 <main+0xe6>
	            {
	                delayTime -= REACTION_TIME_STEP1;
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <main+0x194>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	3b0a      	subs	r3, #10
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <main+0x194>)
 8000782:	801a      	strh	r2, [r3, #0]
 8000784:	e7a2      	b.n	80006cc <main+0x2c>
	            }
	            else if ((delayTime <= 100) && (delayTime > 30))
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <main+0x194>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b64      	cmp	r3, #100	; 0x64
 800078c:	d80a      	bhi.n	80007a4 <main+0x104>
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <main+0x194>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	2b1e      	cmp	r3, #30
 8000794:	d906      	bls.n	80007a4 <main+0x104>
	            {
	                delayTime -= REACTION_TIME_STEP2;
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <main+0x194>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	3b05      	subs	r3, #5
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <main+0x194>)
 80007a0:	801a      	strh	r2, [r3, #0]
 80007a2:	e03f      	b.n	8000824 <main+0x184>
	            }
	            else if ((delayTime <= 30) && (delayTime > 5))
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <main+0x194>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2b1e      	cmp	r3, #30
 80007aa:	d88f      	bhi.n	80006cc <main+0x2c>
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <main+0x194>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d98b      	bls.n	80006cc <main+0x2c>
	            {
	                delayTime -= REACTION_TIME_STEP3;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <main+0x194>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <main+0x194>)
 80007be:	801a      	strh	r2, [r3, #0]
 80007c0:	e784      	b.n	80006cc <main+0x2c>
	            }
	        }
	        else	// If player missed LED in the middle, that means the game is over. Show fail animation, show the score and start over again.
	        {
	            i = 0;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <main+0x18c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
	            HAL_Delay(500);
 80007c8:	23fa      	movs	r3, #250	; 0xfa
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fa77 	bl	8000cc0 <HAL_Delay>
	            gameShowFailAnimation();
 80007d2:	f7ff fddd 	bl	8000390 <gameShowFailAnimation>
	            HAL_Delay(500);
 80007d6:	23fa      	movs	r3, #250	; 0xfa
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fa70 	bl	8000cc0 <HAL_Delay>
	            gameShowResult(score);
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <main+0x198>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fdf7 	bl	80003d8 <gameShowResult>
	            HAL_Delay(500);
 80007ea:	23fa      	movs	r3, #250	; 0xfa
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fa66 	bl	8000cc0 <HAL_Delay>
	            score = 0;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <main+0x198>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	            delayTime = 250;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <main+0x194>)
 80007fc:	22fa      	movs	r2, #250	; 0xfa
 80007fe:	801a      	strh	r2, [r3, #0]
	            gameShowStartAnimation();
 8000800:	f7ff fd4a 	bl	8000298 <gameShowStartAnimation>
 8000804:	e762      	b.n	80006cc <main+0x2c>
	        }
	    }	// If timeout has occurred, that means button is not pressed, move the dot.
	    else
	    {
	        down == 0 ? i++ : i--;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <main+0x190>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d105      	bne.n	800081a <main+0x17a>
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <main+0x18c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <main+0x18c>)
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e758      	b.n	80006cc <main+0x2c>
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <main+0x18c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <main+0x18c>)
 8000822:	601a      	str	r2, [r3, #0]
  {
 8000824:	e752      	b.n	80006cc <main+0x2c>
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000054 	.word	0x20000054
 800082c:	200000a4 	.word	0x200000a4
 8000830:	200000a0 	.word	0x200000a0
 8000834:	20000024 	.word	0x20000024
 8000838:	200000a1 	.word	0x200000a1

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b08d      	sub	sp, #52	; 0x34
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	2414      	movs	r4, #20
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	231c      	movs	r3, #28
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f001 fe29 	bl	80024a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000852:	003b      	movs	r3, r7
 8000854:	0018      	movs	r0, r3
 8000856:	2314      	movs	r3, #20
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f001 fe22 	bl	80024a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0192      	lsls	r2, r2, #6
 8000874:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fcce 	bl	8001220 <HAL_RCC_OscConfig>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000888:	f000 f8e4 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	003b      	movs	r3, r7
 800088e:	2207      	movs	r2, #7
 8000890:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000892:	003b      	movs	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800089e:	003b      	movs	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008aa:	003b      	movs	r3, r7
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 feb0 	bl	8001614 <HAL_RCC_ClockConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008b8:	f000 f8cc 	bl	8000a54 <Error_Handler>
  }
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00d      	add	sp, #52	; 0x34
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	231c      	movs	r3, #28
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f001 fde6 	bl	80024a4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_TIM14_Init+0x90>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008e0:	220f      	movs	r2, #15
 80008e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 47;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008ec:	222f      	movs	r2, #47	; 0x2f
 80008ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 ffd4 	bl	80018ac <HAL_TIM_Base_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000908:	f000 f8a4 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_TIM14_Init+0x8c>)
 800090e:	0018      	movs	r0, r3
 8000910:	f001 f872 	bl	80019f8 <HAL_TIM_OC_Init>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f89c 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	1d39      	adds	r1, r7, #4
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_TIM14_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f001 f9ee 	bl	8001d1c <HAL_TIM_OC_ConfigChannel>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000944:	f000 f886 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b008      	add	sp, #32
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000054 	.word	0x20000054
 8000954:	40002000 	.word	0x40002000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	240c      	movs	r4, #12
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f001 fd9b 	bl	80024a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <MX_GPIO_Init+0xdc>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000972:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <MX_GPIO_Init+0xdc>)
 8000974:	2102      	movs	r1, #2
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xdc>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097e:	2202      	movs	r2, #2
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_GPIO_Init+0xdc>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_GPIO_Init+0xdc>)
 800098c:	2101      	movs	r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xdc>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000996:	2201      	movs	r2, #1
 8000998:	4013      	ands	r3, r2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_GPIO_Init+0xe0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fc1e 	bl	80011e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80009aa:	4924      	ldr	r1, [pc, #144]	; (8000a3c <MX_GPIO_Init+0xe4>)
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2200      	movs	r2, #0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fc17 	bl	80011e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2201      	movs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <MX_GPIO_Init+0xe0>)
 80009d4:	0019      	movs	r1, r3
 80009d6:	0010      	movs	r0, r2
 80009d8:	f000 fa7e 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xe4>)
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fa6b 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	0192      	lsls	r2, r2, #6
 8000a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2201      	movs	r2, #1
 8000a16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	187a      	adds	r2, r7, r1
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fa59 	bl	8000ed8 <HAL_GPIO_Init>

  /**/
  HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7|HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA11);
 8000a26:	2014      	movs	r0, #20
 8000a28:	f000 f96c 	bl	8000d04 <HAL_SYSCFG_SetPinBinding>

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b009      	add	sp, #36	; 0x24
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	50000400 	.word	0x50000400
 8000a3c:	00001801 	.word	0x00001801

08000a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    gameTimerISR();
 8000a48:	f7ff fd5c 	bl	8000504 <gameTimerISR>
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	2201      	movs	r2, #1
 8000a78:	4013      	ands	r3, r2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0549      	lsls	r1, r1, #21
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	055b      	lsls	r3, r3, #21
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_TIM_Base_MspInit+0x48>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d115      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0209      	lsls	r1, r1, #8
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2013      	movs	r0, #19
 8000adc:	f000 f9ca 	bl	8000e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000ae0:	2013      	movs	r0, #19
 8000ae2:	f000 f9dc 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40002000 	.word	0x40002000
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f8b6 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <TIM14_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 ffc2 	bl	8001ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000054 	.word	0x20000054

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <SystemInit+0x14>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	0512      	lsls	r2, r2, #20
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopForever+0xe>)
  adds r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
  ldr r2, =_sbss
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b78:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7a:	3204      	adds	r2, #4

08000b7c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <LoopForever+0x16>)
  cmp r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b82:	f7ff ffdd 	bl	8000b40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b86:	f001 fc69 	bl	800245c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd89 	bl	80006a0 <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b94:	08002568 	.word	0x08002568
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b9c:	20000034 	.word	0x20000034
  ldr r2, =_sbss
 8000ba0:	20000034 	.word	0x20000034
  ldr r3, = _ebss
 8000ba4:	200000ac 	.word	0x200000ac

08000ba8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_IRQHandler>
	...

08000bac <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a combination of LL_PINMUX_xx defines
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->CFGR3, mux_cfg);
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <LL_SYSCFG_ConfigPinMux+0x18>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f80f 	bl	8000bf8 <HAL_InitTick>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f7ff ff3b 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_InitTick+0x88>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d02b      	beq.n	8000c68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_InitTick+0x8c>)
 8000c12:	681c      	ldr	r4, [r3, #0]
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_InitTick+0x88>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	0019      	movs	r1, r3
 8000c1a:	23fa      	movs	r3, #250	; 0xfa
 8000c1c:	0098      	lsls	r0, r3, #2
 8000c1e:	f7ff fa73 	bl	8000108 <__udivsi3>
 8000c22:	0003      	movs	r3, r0
 8000c24:	0019      	movs	r1, r3
 8000c26:	0020      	movs	r0, r4
 8000c28:	f7ff fa6e 	bl	8000108 <__udivsi3>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f945 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d112      	bne.n	8000c5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80a      	bhi.n	8000c54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f914 	bl	8000e74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_InitTick+0x90>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e00d      	b.n	8000c70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e008      	b.n	8000c70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	230f      	movs	r3, #15
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e003      	b.n	8000c70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	781b      	ldrb	r3, [r3, #0]
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b005      	add	sp, #20
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000030 	.word	0x20000030
 8000c84:	20000028 	.word	0x20000028
 8000c88:	2000002c 	.word	0x2000002c

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_IncTick+0x18>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	18d2      	adds	r2, r2, r3
 8000c9a:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <HAL_IncTick+0x18>)
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000a8 	.word	0x200000a8
 8000ca8:	20000030 	.word	0x20000030

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	200000a8 	.word	0x200000a8

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff fff0 	bl	8000cac <HAL_GetTick>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	d004      	beq.n	8000ce4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_Delay+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	f7ff ffe1 	bl	8000cac <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d8f7      	bhi.n	8000ce6 <HAL_Delay+0x26>
  {
  }
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b004      	add	sp, #16
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000030 	.word	0x20000030

08000d04 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be any combination of HAL_BIND_xx defines
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff ff4c 	bl	8000bac <LL_SYSCFG_ConfigPinMux>
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2e:	d809      	bhi.n	8000d44 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	001a      	movs	r2, r3
 8000d36:	231f      	movs	r3, #31
 8000d38:	401a      	ands	r2, r3
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_EnableIRQ+0x30>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4091      	lsls	r1, r2
 8000d40:	000a      	movs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	0002      	movs	r2, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b7f      	cmp	r3, #127	; 0x7f
 8000d64:	d828      	bhi.n	8000db8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d66:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <__NVIC_SetPriority+0xd4>)
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	33c0      	adds	r3, #192	; 0xc0
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	589b      	ldr	r3, [r3, r2]
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	400a      	ands	r2, r1
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	21ff      	movs	r1, #255	; 0xff
 8000d84:	4091      	lsls	r1, r2
 8000d86:	000a      	movs	r2, r1
 8000d88:	43d2      	mvns	r2, r2
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	401a      	ands	r2, r3
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	4003      	ands	r3, r0
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <__NVIC_SetPriority+0xd4>)
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	430a      	orrs	r2, r1
 8000db0:	33c0      	adds	r3, #192	; 0xc0
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000db6:	e031      	b.n	8000e1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <__NVIC_SetPriority+0xd8>)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	400b      	ands	r3, r1
 8000dc4:	3b08      	subs	r3, #8
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3306      	adds	r3, #6
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	3304      	adds	r3, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	2203      	movs	r2, #3
 8000dda:	400a      	ands	r2, r1
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	21ff      	movs	r1, #255	; 0xff
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	401a      	ands	r2, r3
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	2303      	movs	r3, #3
 8000dfa:	4003      	ands	r3, r0
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <__NVIC_SetPriority+0xd8>)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	001c      	movs	r4, r3
 8000e08:	230f      	movs	r3, #15
 8000e0a:	4023      	ands	r3, r4
 8000e0c:	3b08      	subs	r3, #8
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	430a      	orrs	r2, r1
 8000e12:	3306      	adds	r3, #6
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	18c3      	adds	r3, r0, r3
 8000e18:	3304      	adds	r3, #4
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b003      	add	sp, #12
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	045b      	lsls	r3, r3, #17
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d301      	bcc.n	8000e44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e40:	2301      	movs	r3, #1
 8000e42:	e010      	b.n	8000e66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <SysTick_Config+0x44>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	425b      	negs	r3, r3
 8000e50:	2103      	movs	r1, #3
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff ff7c 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x44>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x44>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	210f      	movs	r1, #15
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	1c02      	adds	r2, r0, #0
 8000e84:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ff33 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ffaf 	bl	8000e2c <SysTick_Config>
 8000ece:	0003      	movs	r3, r0
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ee6:	e14d      	b.n	8001184 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d100      	bne.n	8000f00 <HAL_GPIO_Init+0x28>
 8000efe:	e13e      	b.n	800117e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x38>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d125      	bne.n	8000f5c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	58d3      	ldr	r3, [r2, r3]
 8000f1c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2207      	movs	r2, #7
 8000f22:	4013      	ands	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	220f      	movs	r2, #15
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2107      	movs	r1, #7
 8000f40:	400b      	ands	r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	409a      	lsls	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	6979      	ldr	r1, [r7, #20]
 8000f5a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	409a      	lsls	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d00b      	beq.n	8000fb0 <HAL_GPIO_Init+0xd8>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	2b11      	cmp	r3, #17
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b12      	cmp	r3, #18
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	401a      	ands	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4313      	orrs	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	4013      	ands	r3, r2
 8001030:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	4013      	ands	r3, r2
 8001054:	d100      	bne.n	8001058 <HAL_GPIO_Init+0x180>
 8001056:	e092      	b.n	800117e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x2c4>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3318      	adds	r3, #24
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	589b      	ldr	r3, [r3, r2]
 8001064:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	220f      	movs	r2, #15
 8001070:	409a      	lsls	r2, r3
 8001072:	0013      	movs	r3, r2
 8001074:	43da      	mvns	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	23a0      	movs	r3, #160	; 0xa0
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	429a      	cmp	r2, r3
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x1d6>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x2c8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x1d2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <HAL_GPIO_Init+0x2cc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x1ce>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x1ca>
 800109e:	2303      	movs	r3, #3
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x1d8>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x1d8>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x1d8>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x1d8>
 80010ae:	2300      	movs	r3, #0
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	2103      	movs	r1, #3
 80010b4:	400a      	ands	r2, r1
 80010b6:	00d2      	lsls	r2, r2, #3
 80010b8:	4093      	lsls	r3, r2
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010c0:	4936      	ldr	r1, [pc, #216]	; (800119c <HAL_GPIO_Init+0x2c4>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3318      	adds	r3, #24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010ce:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_GPIO_Init+0x2c4>)
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	58d3      	ldr	r3, [r2, r3]
 80010d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43da      	mvns	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	025b      	lsls	r3, r3, #9
 80010e8:	4013      	ands	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80010f4:	4929      	ldr	r1, [pc, #164]	; (800119c <HAL_GPIO_Init+0x2c4>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_GPIO_Init+0x2c4>)
 80010fe:	2384      	movs	r3, #132	; 0x84
 8001100:	58d3      	ldr	r3, [r2, r3]
 8001102:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	4013      	ands	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001122:	491e      	ldr	r1, [pc, #120]	; (800119c <HAL_GPIO_Init+0x2c4>)
 8001124:	2284      	movs	r2, #132	; 0x84
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_GPIO_Init+0x2c4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43da      	mvns	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	4013      	ands	r3, r2
 8001138:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	035b      	lsls	r3, r3, #13
 8001142:	4013      	ands	r3, r2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_GPIO_Init+0x2c4>)
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_GPIO_Init+0x2c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	039b      	lsls	r3, r3, #14
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_GPIO_Init+0x2c4>)
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	40da      	lsrs	r2, r3
 800118c:	1e13      	subs	r3, r2, #0
 800118e:	d000      	beq.n	8001192 <HAL_GPIO_Init+0x2ba>
 8001190:	e6aa      	b.n	8000ee8 <HAL_GPIO_Init+0x10>
  }
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b006      	add	sp, #24
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021800 	.word	0x40021800
 80011a0:	50000400 	.word	0x50000400
 80011a4:	50000800 	.word	0x50000800
 80011a8:	50001400 	.word	0x50001400

080011ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	000a      	movs	r2, r1
 80011b6:	1cbb      	adds	r3, r7, #2
 80011b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	1cba      	adds	r2, r7, #2
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	4013      	ands	r3, r2
 80011c4:	d004      	beq.n	80011d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	0008      	movs	r0, r1
 80011f0:	0011      	movs	r1, r2
 80011f2:	1cbb      	adds	r3, r7, #2
 80011f4:	1c02      	adds	r2, r0, #0
 80011f6:	801a      	strh	r2, [r3, #0]
 80011f8:	1c7b      	adds	r3, r7, #1
 80011fa:	1c0a      	adds	r2, r1, #0
 80011fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fe:	1c7b      	adds	r3, r7, #1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	881a      	ldrh	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800120e:	e003      	b.n	8001218 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001210:	1cbb      	adds	r3, r7, #2
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e1e5      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2201      	movs	r2, #1
 8001238:	4013      	ands	r3, r2
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0x1e>
 800123c:	e06f      	b.n	800131e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123e:	4bc4      	ldr	r3, [pc, #784]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2238      	movs	r2, #56	; 0x38
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d10b      	bne.n	8001266 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	4bc0      	ldr	r3, [pc, #768]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	4013      	ands	r3, r2
 8001258:	d061      	beq.n	800131e <HAL_RCC_OscConfig+0xfe>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d15d      	bne.n	800131e <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e1cb      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	025b      	lsls	r3, r3, #9
 800126e:	429a      	cmp	r2, r3
 8001270:	d107      	bne.n	8001282 <HAL_RCC_OscConfig+0x62>
 8001272:	4bb7      	ldr	r3, [pc, #732]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4bb6      	ldr	r3, [pc, #728]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0249      	lsls	r1, r1, #9
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e020      	b.n	80012c4 <HAL_RCC_OscConfig+0xa4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	23a0      	movs	r3, #160	; 0xa0
 8001288:	02db      	lsls	r3, r3, #11
 800128a:	429a      	cmp	r2, r3
 800128c:	d10e      	bne.n	80012ac <HAL_RCC_OscConfig+0x8c>
 800128e:	4bb0      	ldr	r3, [pc, #704]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4baf      	ldr	r3, [pc, #700]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	02c9      	lsls	r1, r1, #11
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	4bac      	ldr	r3, [pc, #688]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4bab      	ldr	r3, [pc, #684]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0249      	lsls	r1, r1, #9
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xa4>
 80012ac:	4ba8      	ldr	r3, [pc, #672]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4ba7      	ldr	r3, [pc, #668]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80012b2:	49a8      	ldr	r1, [pc, #672]	; (8001554 <HAL_RCC_OscConfig+0x334>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4ba5      	ldr	r3, [pc, #660]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4ba4      	ldr	r3, [pc, #656]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80012be:	49a6      	ldr	r1, [pc, #664]	; (8001558 <HAL_RCC_OscConfig+0x338>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d014      	beq.n	80012f6 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fcee 	bl	8000cac <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d6:	f7ff fce9 	bl	8000cac <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e18a      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	029b      	lsls	r3, r3, #10
 80012f0:	4013      	ands	r3, r2
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0xb6>
 80012f4:	e013      	b.n	800131e <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fcd9 	bl	8000cac <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fcd4 	bl	8000cac <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e175      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001312:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	029b      	lsls	r3, r3, #10
 800131a:	4013      	ands	r3, r2
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d100      	bne.n	800132a <HAL_RCC_OscConfig+0x10a>
 8001328:	e08c      	b.n	8001444 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132a:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2238      	movs	r2, #56	; 0x38
 8001330:	4013      	ands	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d135      	bne.n	80013a6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133a:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4013      	ands	r3, r2
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x132>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e155      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b7f      	ldr	r3, [pc, #508]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a81      	ldr	r2, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x33c>)
 8001358:	4013      	ands	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	021a      	lsls	r2, r3, #8
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x340>)
 8001374:	4013      	ands	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001382:	4b73      	ldr	r3, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0adb      	lsrs	r3, r3, #11
 8001388:	2207      	movs	r2, #7
 800138a:	4013      	ands	r3, r2
 800138c:	4a75      	ldr	r2, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x344>)
 800138e:	40da      	lsrs	r2, r3
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x348>)
 8001392:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001394:	4b75      	ldr	r3, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x34c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff fc2d 	bl	8000bf8 <HAL_InitTick>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d050      	beq.n	8001444 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e12b      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d030      	beq.n	8001410 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6b      	ldr	r2, [pc, #428]	; (8001560 <HAL_RCC_OscConfig+0x340>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	4b64      	ldr	r3, [pc, #400]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	0049      	lsls	r1, r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc6c 	bl	8000cac <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fc67 	bl	8000cac <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e108      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b55      	ldr	r3, [pc, #340]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_RCC_OscConfig+0x33c>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	021a      	lsls	r2, r3, #8
 8001408:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800140a:	430a      	orrs	r2, r1
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e019      	b.n	8001444 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001416:	4956      	ldr	r1, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x350>)
 8001418:	400a      	ands	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc46 	bl	8000cac <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fc41 	bl	8000cac <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0e2      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4013      	ands	r3, r2
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2208      	movs	r2, #8
 800144a:	4013      	ands	r3, r2
 800144c:	d047      	beq.n	80014de <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800144e:	4b40      	ldr	r3, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2238      	movs	r2, #56	; 0x38
 8001454:	4013      	ands	r3, r2
 8001456:	2b18      	cmp	r3, #24
 8001458:	d10a      	bne.n	8001470 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d03c      	beq.n	80014de <HAL_RCC_OscConfig+0x2be>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d138      	bne.n	80014de <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0c6      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d019      	beq.n	80014ac <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800147a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800147e:	2101      	movs	r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc12 	bl	8000cac <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fc0d 	bl	8000cac <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0ae      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80014a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f1      	beq.n	800148e <HAL_RCC_OscConfig+0x26e>
 80014aa:	e018      	b.n	80014de <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80014ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbf8 	bl	8000cac <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fbf3 	bl	8000cac <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e094      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d1f1      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2204      	movs	r2, #4
 80014e4:	4013      	ands	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ca>
 80014e8:	e088      	b.n	80015fc <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	230f      	movs	r3, #15
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2238      	movs	r2, #56	; 0x38
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d100      	bne.n	800150a <HAL_RCC_OscConfig+0x2ea>
 8001508:	e078      	b.n	80015fc <HAL_RCC_OscConfig+0x3dc>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d000      	beq.n	8001514 <HAL_RCC_OscConfig+0x2f4>
 8001512:	e073      	b.n	80015fc <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e072      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x30e>
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001526:	2101      	movs	r1, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	65da      	str	r2, [r3, #92]	; 0x5c
 800152c:	e02e      	b.n	800158c <HAL_RCC_OscConfig+0x36c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d11e      	bne.n	8001574 <HAL_RCC_OscConfig+0x354>
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 800153c:	2104      	movs	r1, #4
 800153e:	430a      	orrs	r2, r1
 8001540:	65da      	str	r2, [r3, #92]	; 0x5c
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001546:	4b02      	ldr	r3, [pc, #8]	; (8001550 <HAL_RCC_OscConfig+0x330>)
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	65da      	str	r2, [r3, #92]	; 0x5c
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0x36c>
 8001550:	40021000 	.word	0x40021000
 8001554:	fffeffff 	.word	0xfffeffff
 8001558:	fffbffff 	.word	0xfffbffff
 800155c:	ffff80ff 	.word	0xffff80ff
 8001560:	ffffc7ff 	.word	0xffffc7ff
 8001564:	02dc6c00 	.word	0x02dc6c00
 8001568:	20000028 	.word	0x20000028
 800156c:	2000002c 	.word	0x2000002c
 8001570:	fffffeff 	.word	0xfffffeff
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 8001576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 8001582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 8001586:	2104      	movs	r1, #4
 8001588:	438a      	bics	r2, r1
 800158a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fb8a 	bl	8000cac <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800159c:	e009      	b.n	80015b2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff fb85 	bl	8000cac <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_RCC_OscConfig+0x3ec>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e025      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x37e>
 80015bc:	e013      	b.n	80015e6 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff fb75 	bl	8000cac <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80015c6:	e009      	b.n	80015dc <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff fb70 	bl	8000cac <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_RCC_OscConfig+0x3ec>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e010      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015e6:	230f      	movs	r3, #15
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 80015f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <HAL_RCC_OscConfig+0x3e8>)
 80015f6:	4906      	ldr	r1, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x3f0>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b006      	add	sp, #24
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40021000 	.word	0x40021000
 800160c:	00001388 	.word	0x00001388
 8001610:	efffffff 	.word	0xefffffff

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0e9      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b76      	ldr	r3, [pc, #472]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2207      	movs	r2, #7
 800162e:	4013      	ands	r3, r2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d91e      	bls.n	8001674 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b73      	ldr	r3, [pc, #460]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2207      	movs	r2, #7
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	4b70      	ldr	r3, [pc, #448]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001648:	f7ff fb30 	bl	8000cac <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001650:	e009      	b.n	8001666 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001652:	f7ff fb2b 	bl	8000cac <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <HAL_RCC_ClockConfig+0x1f4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0ca      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2207      	movs	r2, #7
 800166c:	4013      	ands	r3, r2
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d017      	beq.n	80016ae <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2204      	movs	r2, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001688:	4b60      	ldr	r3, [pc, #384]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <HAL_RCC_ClockConfig+0x1fc>)
 800168e:	401a      	ands	r2, r3
 8001690:	4b5e      	ldr	r3, [pc, #376]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 8001692:	21b0      	movs	r1, #176	; 0xb0
 8001694:	0109      	lsls	r1, r1, #4
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <HAL_RCC_ClockConfig+0x200>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	d055      	beq.n	8001764 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80016b8:	4b54      	ldr	r3, [pc, #336]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	221c      	movs	r2, #28
 80016be:	4393      	bics	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	d11f      	bne.n	8001720 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e08b      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4013      	ands	r3, r2
 80016f6:	d113      	bne.n	8001720 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e07f      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d106      	bne.n	8001712 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d108      	bne.n	8001720 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e074      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2202      	movs	r2, #2
 8001718:	4013      	ands	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e06d      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2207      	movs	r2, #7
 8001726:	4393      	bics	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001734:	f7ff faba 	bl	8000cac <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173c:	e009      	b.n	8001752 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173e:	f7ff fab5 	bl	8000cac <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <HAL_RCC_ClockConfig+0x1f4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e054      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2238      	movs	r2, #56	; 0x38
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	429a      	cmp	r2, r3
 8001762:	d1ec      	bne.n	800173e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2207      	movs	r2, #7
 800176a:	4013      	ands	r3, r2
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d21e      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2207      	movs	r2, #7
 8001778:	4393      	bics	r3, r2
 800177a:	0019      	movs	r1, r3
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001784:	f7ff fa92 	bl	8000cac <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7ff fa8d 	bl	8000cac <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_RCC_ClockConfig+0x1f4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e02c      	b.n	80017fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2207      	movs	r2, #7
 80017a8:	4013      	ands	r3, r2
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	4013      	ands	r3, r2
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_RCC_ClockConfig+0x204>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017ce:	f000 f82b 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017d2:	0001      	movs	r1, r0
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	220f      	movs	r2, #15
 80017dc:	401a      	ands	r2, r3
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_RCC_ClockConfig+0x208>)
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	58d3      	ldr	r3, [r2, r3]
 80017e4:	221f      	movs	r2, #31
 80017e6:	4013      	ands	r3, r2
 80017e8:	000a      	movs	r2, r1
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCC_ClockConfig+0x20c>)
 80017ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_RCC_ClockConfig+0x210>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff f9ff 	bl	8000bf8 <HAL_InitTick>
 80017fa:	0003      	movs	r3, r0
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40022000 	.word	0x40022000
 8001808:	00001388 	.word	0x00001388
 800180c:	40021000 	.word	0x40021000
 8001810:	ffff84ff 	.word	0xffff84ff
 8001814:	fffff0ff 	.word	0xfffff0ff
 8001818:	ffff8fff 	.word	0xffff8fff
 800181c:	080024cc 	.word	0x080024cc
 8001820:	20000028 	.word	0x20000028
 8001824:	2000002c 	.word	0x2000002c

08001828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	4013      	ands	r3, r2
 8001836:	d10f      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x78>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0adb      	lsrs	r3, r3, #11
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	2201      	movs	r2, #1
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800184e:	f7fe fc5b 	bl	8000108 <__udivsi3>
 8001852:	0003      	movs	r3, r0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	e01e      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x78>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2238      	movs	r2, #56	; 0x38
 800185e:	4013      	ands	r3, r2
 8001860:	2b08      	cmp	r3, #8
 8001862:	d102      	bne.n	800186a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	e015      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x78>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2238      	movs	r2, #56	; 0x38
 8001870:	4013      	ands	r3, r2
 8001872:	2b20      	cmp	r3, #32
 8001874:	d103      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	4013      	ands	r3, r2
 8001886:	2b18      	cmp	r3, #24
 8001888:	d103      	bne.n	8001892 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800188a:	23fa      	movs	r3, #250	; 0xfa
 800188c:	01db      	lsls	r3, r3, #7
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	e001      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	02dc6c00 	.word	0x02dc6c00
 80018a8:	007a1200 	.word	0x007a1200

080018ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e04a      	b.n	8001954 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	223d      	movs	r2, #61	; 0x3d
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	223c      	movs	r2, #60	; 0x3c
 80018ce:	2100      	movs	r1, #0
 80018d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff f8e7 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	223d      	movs	r2, #61	; 0x3d
 80018de:	2102      	movs	r1, #2
 80018e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	0019      	movs	r1, r3
 80018ec:	0010      	movs	r0, r2
 80018ee:	f000 fa95 	bl	8001e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2248      	movs	r2, #72	; 0x48
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	223e      	movs	r2, #62	; 0x3e
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	223f      	movs	r2, #63	; 0x3f
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	2101      	movs	r1, #1
 8001918:	5499      	strb	r1, [r3, r2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2242      	movs	r2, #66	; 0x42
 800191e:	2101      	movs	r1, #1
 8001920:	5499      	strb	r1, [r3, r2]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2243      	movs	r2, #67	; 0x43
 8001926:	2101      	movs	r1, #1
 8001928:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2244      	movs	r2, #68	; 0x44
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2245      	movs	r2, #69	; 0x45
 8001936:	2101      	movs	r1, #1
 8001938:	5499      	strb	r1, [r3, r2]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2246      	movs	r2, #70	; 0x46
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2247      	movs	r2, #71	; 0x47
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	223d      	movs	r2, #61	; 0x3d
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	223d      	movs	r2, #61	; 0x3d
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d001      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e037      	b.n	80019e4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	223d      	movs	r2, #61	; 0x3d
 8001978:	2102      	movs	r1, #2
 800197a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_TIM_Base_Start_IT+0x90>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x44>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <HAL_TIM_Base_Start_IT+0x94>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d116      	bne.n	80019ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_TIM_Base_Start_IT+0x98>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d016      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0x84>
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d011      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019cc:	e008      	b.n	80019e0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e000      	b.n	80019e2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40000400 	.word	0x40000400
 80019f4:	00010007 	.word	0x00010007

080019f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e04a      	b.n	8001aa0 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	223d      	movs	r2, #61	; 0x3d
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223c      	movs	r2, #60	; 0x3c
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f841 	bl	8001aa8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	223d      	movs	r2, #61	; 0x3d
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	0019      	movs	r1, r3
 8001a38:	0010      	movs	r0, r2
 8001a3a:	f000 f9ef 	bl	8001e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2248      	movs	r2, #72	; 0x48
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	223e      	movs	r2, #62	; 0x3e
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2241      	movs	r2, #65	; 0x41
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2242      	movs	r2, #66	; 0x42
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2243      	movs	r2, #67	; 0x43
 8001a72:	2101      	movs	r1, #1
 8001a74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2244      	movs	r2, #68	; 0x44
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2245      	movs	r2, #69	; 0x45
 8001a82:	2101      	movs	r1, #1
 8001a84:	5499      	strb	r1, [r3, r2]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2246      	movs	r2, #70	; 0x46
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2247      	movs	r2, #71	; 0x47
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	223d      	movs	r2, #61	; 0x3d
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d124      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d11d      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4252      	negs	r2, r2
 8001ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2203      	movs	r2, #3
 8001af4:	4013      	ands	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 f976 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001b00:	e007      	b.n	8001b12 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 f969 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 f975 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d125      	bne.n	8001b72 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d11e      	bne.n	8001b72 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	23c0      	movs	r3, #192	; 0xc0
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f949 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001b5a:	e007      	b.n	8001b6c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f93c 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f948 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d124      	bne.n	8001bca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2208      	movs	r2, #8
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d11d      	bne.n	8001bca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2209      	movs	r2, #9
 8001b94:	4252      	negs	r2, r2
 8001b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 f91d 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001bb2:	e007      	b.n	8001bc4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f910 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 f91c 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d125      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2210      	movs	r2, #16
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d11e      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2211      	movs	r2, #17
 8001bec:	4252      	negs	r2, r2
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	23c0      	movs	r3, #192	; 0xc0
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d004      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f8f0 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e007      	b.n	8001c1e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f8e3 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f8ef 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d10f      	bne.n	8001c52 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4252      	negs	r2, r2
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7fe fef7 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d10f      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b80      	cmp	r3, #128	; 0x80
 8001c6c:	d108      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2281      	movs	r2, #129	; 0x81
 8001c74:	4252      	negs	r2, r2
 8001c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fbde 	bl	800243c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10e      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b80      	cmp	r3, #128	; 0x80
 8001ca0:	d107      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_TIM_IRQHandler+0x260>)
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 fbcd 	bl	800244c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b40      	cmp	r3, #64	; 0x40
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d108      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	4252      	negs	r2, r2
 8001cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f000 f896 	bl	8001e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d10f      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d108      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2221      	movs	r2, #33	; 0x21
 8001d02:	4252      	negs	r2, r2
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 fb8f 	bl	800242c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	fffffeff 	.word	0xfffffeff

08001d1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	223c      	movs	r2, #60	; 0x3c
 8001d34:	5c9b      	ldrb	r3, [r3, r2]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_OC_ConfigChannel+0x22>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e048      	b.n	8001dd0 <HAL_TIM_OC_ConfigChannel+0xb4>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	223c      	movs	r2, #60	; 0x3c
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b14      	cmp	r3, #20
 8001d4a:	d835      	bhi.n	8001db8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	009a      	lsls	r2, r3, #2
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8001d52:	18d3      	adds	r3, r2, r3
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 f8c7 	bl	8001ef4 <TIM_OC1_SetConfig>
      break;
 8001d66:	e02c      	b.n	8001dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 f93f 	bl	8001ff4 <TIM_OC2_SetConfig>
      break;
 8001d76:	e024      	b.n	8001dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	0011      	movs	r1, r2
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 f9b5 	bl	80020f0 <TIM_OC3_SetConfig>
      break;
 8001d86:	e01c      	b.n	8001dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	0011      	movs	r1, r2
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 fa2f 	bl	80021f4 <TIM_OC4_SetConfig>
      break;
 8001d96:	e014      	b.n	8001dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 fa8b 	bl	80022bc <TIM_OC5_SetConfig>
      break;
 8001da6:	e00c      	b.n	8001dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 fadd 	bl	8002370 <TIM_OC6_SetConfig>
      break;
 8001db6:	e004      	b.n	8001dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001db8:	2317      	movs	r3, #23
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
      break;
 8001dc0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	223c      	movs	r2, #60	; 0x3c
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]

  return status;
 8001dca:	2317      	movs	r3, #23
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	781b      	ldrb	r3, [r3, #0]
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b006      	add	sp, #24
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	0800250c 	.word	0x0800250c

08001ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <TIM_Base_SetConfig+0xc0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d003      	beq.n	8001e3c <TIM_Base_SetConfig+0x20>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <TIM_Base_SetConfig+0xc4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d108      	bne.n	8001e4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2270      	movs	r2, #112	; 0x70
 8001e40:	4393      	bics	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <TIM_Base_SetConfig+0xc0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00f      	beq.n	8001e76 <TIM_Base_SetConfig+0x5a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <TIM_Base_SetConfig+0xc4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00b      	beq.n	8001e76 <TIM_Base_SetConfig+0x5a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <TIM_Base_SetConfig+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <TIM_Base_SetConfig+0x5a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <TIM_Base_SetConfig+0xcc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <TIM_Base_SetConfig+0x5a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <TIM_Base_SetConfig+0xd0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d108      	bne.n	8001e88 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <TIM_Base_SetConfig+0xd4>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	001a      	movs	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <TIM_Base_SetConfig+0xc0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <TIM_Base_SetConfig+0xaa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <TIM_Base_SetConfig+0xcc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_Base_SetConfig+0xaa>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <TIM_Base_SetConfig+0xd0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d103      	bne.n	8001ece <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	615a      	str	r2, [r3, #20]
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b004      	add	sp, #16
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40002000 	.word	0x40002000
 8001ee8:	40014400 	.word	0x40014400
 8001eec:	40014800 	.word	0x40014800
 8001ef0:	fffffcff 	.word	0xfffffcff

08001ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4393      	bics	r3, r2
 8001f06:	001a      	movs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <TIM_OC1_SetConfig+0xe8>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <TIM_OC1_SetConfig+0xec>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <TIM_OC1_SetConfig+0x6e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <TIM_OC1_SetConfig+0xf0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <TIM_OC1_SetConfig+0x6e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <TIM_OC1_SetConfig+0xf4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10c      	bne.n	8001f7c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2208      	movs	r2, #8
 8001f66:	4393      	bics	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4393      	bics	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <TIM_OC1_SetConfig+0xec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <TIM_OC1_SetConfig+0xa0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <TIM_OC1_SetConfig+0xf0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_OC1_SetConfig+0xa0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <TIM_OC1_SetConfig+0xf4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d111      	bne.n	8001fb8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <TIM_OC1_SetConfig+0xf8>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <TIM_OC1_SetConfig+0xfc>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	621a      	str	r2, [r3, #32]
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b006      	add	sp, #24
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	fffeff8f 	.word	0xfffeff8f
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40014800 	.word	0x40014800
 8001fec:	fffffeff 	.word	0xfffffeff
 8001ff0:	fffffdff 	.word	0xfffffdff

08001ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2210      	movs	r2, #16
 8002004:	4393      	bics	r3, r2
 8002006:	001a      	movs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <TIM_OC2_SetConfig+0xe0>)
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a2b      	ldr	r2, [pc, #172]	; (80020d8 <TIM_OC2_SetConfig+0xe4>)
 800202a:	4013      	ands	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2220      	movs	r2, #32
 800203e:	4393      	bics	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <TIM_OC2_SetConfig+0xe8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10d      	bne.n	8002072 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	4393      	bics	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	4393      	bics	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <TIM_OC2_SetConfig+0xe8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <TIM_OC2_SetConfig+0x96>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <TIM_OC2_SetConfig+0xec>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_OC2_SetConfig+0x96>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <TIM_OC2_SetConfig+0xf0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d113      	bne.n	80020b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <TIM_OC2_SetConfig+0xf4>)
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <TIM_OC2_SetConfig+0xf8>)
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	621a      	str	r2, [r3, #32]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	feff8fff 	.word	0xfeff8fff
 80020d8:	fffffcff 	.word	0xfffffcff
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	fffffbff 	.word	0xfffffbff
 80020ec:	fffff7ff 	.word	0xfffff7ff

080020f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <TIM_OC3_SetConfig+0xdc>)
 8002100:	401a      	ands	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <TIM_OC3_SetConfig+0xe0>)
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2203      	movs	r2, #3
 8002124:	4393      	bics	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <TIM_OC3_SetConfig+0xe4>)
 8002136:	4013      	ands	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <TIM_OC3_SetConfig+0xe8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10d      	bne.n	800216a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <TIM_OC3_SetConfig+0xec>)
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <TIM_OC3_SetConfig+0xf0>)
 8002166:	4013      	ands	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <TIM_OC3_SetConfig+0xe8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_OC3_SetConfig+0x92>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <TIM_OC3_SetConfig+0xf4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_OC3_SetConfig+0x92>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <TIM_OC3_SetConfig+0xf8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d113      	bne.n	80021aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <TIM_OC3_SetConfig+0xfc>)
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <TIM_OC3_SetConfig+0x100>)
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	621a      	str	r2, [r3, #32]
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b006      	add	sp, #24
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	fffffeff 	.word	0xfffffeff
 80021d0:	fffeff8f 	.word	0xfffeff8f
 80021d4:	fffffdff 	.word	0xfffffdff
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	fffff7ff 	.word	0xfffff7ff
 80021e0:	fffffbff 	.word	0xfffffbff
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	ffffefff 	.word	0xffffefff
 80021f0:	ffffdfff 	.word	0xffffdfff

080021f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a26      	ldr	r2, [pc, #152]	; (800229c <TIM_OC4_SetConfig+0xa8>)
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <TIM_OC4_SetConfig+0xac>)
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <TIM_OC4_SetConfig+0xb0>)
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <TIM_OC4_SetConfig+0xb4>)
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	031b      	lsls	r3, r3, #12
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <TIM_OC4_SetConfig+0xb8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <TIM_OC4_SetConfig+0x70>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <TIM_OC4_SetConfig+0xbc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_OC4_SetConfig+0x70>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <TIM_OC4_SetConfig+0xc0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d109      	bne.n	8002278 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <TIM_OC4_SetConfig+0xc4>)
 8002268:	4013      	ands	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	019b      	lsls	r3, r3, #6
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	621a      	str	r2, [r3, #32]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b006      	add	sp, #24
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	ffffefff 	.word	0xffffefff
 80022a0:	feff8fff 	.word	0xfeff8fff
 80022a4:	fffffcff 	.word	0xfffffcff
 80022a8:	ffffdfff 	.word	0xffffdfff
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40014400 	.word	0x40014400
 80022b4:	40014800 	.word	0x40014800
 80022b8:	ffffbfff 	.word	0xffffbfff

080022bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a23      	ldr	r2, [pc, #140]	; (8002358 <TIM_OC5_SetConfig+0x9c>)
 80022cc:	401a      	ands	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <TIM_OC5_SetConfig+0xa0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <TIM_OC5_SetConfig+0xa4>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a15      	ldr	r2, [pc, #84]	; (8002364 <TIM_OC5_SetConfig+0xa8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <TIM_OC5_SetConfig+0x66>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <TIM_OC5_SetConfig+0xac>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d003      	beq.n	8002322 <TIM_OC5_SetConfig+0x66>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <TIM_OC5_SetConfig+0xb0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d109      	bne.n	8002336 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <TIM_OC5_SetConfig+0x9c>)
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	621a      	str	r2, [r3, #32]
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b006      	add	sp, #24
 8002356:	bd80      	pop	{r7, pc}
 8002358:	fffeffff 	.word	0xfffeffff
 800235c:	fffeff8f 	.word	0xfffeff8f
 8002360:	fffdffff 	.word	0xfffdffff
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40014400 	.word	0x40014400
 800236c:	40014800 	.word	0x40014800

08002370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a24      	ldr	r2, [pc, #144]	; (8002410 <TIM_OC6_SetConfig+0xa0>)
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <TIM_OC6_SetConfig+0xa4>)
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <TIM_OC6_SetConfig+0xa8>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a16      	ldr	r2, [pc, #88]	; (800241c <TIM_OC6_SetConfig+0xac>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d007      	beq.n	80023d8 <TIM_OC6_SetConfig+0x68>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <TIM_OC6_SetConfig+0xb0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <TIM_OC6_SetConfig+0x68>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <TIM_OC6_SetConfig+0xb4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d109      	bne.n	80023ec <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <TIM_OC6_SetConfig+0xb8>)
 80023dc:	4013      	ands	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b006      	add	sp, #24
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	ffefffff 	.word	0xffefffff
 8002414:	feff8fff 	.word	0xfeff8fff
 8002418:	ffdfffff 	.word	0xffdfffff
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800
 8002428:	fffbffff 	.word	0xfffbffff

0800242c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <__libc_init_array>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	2600      	movs	r6, #0
 8002460:	4d0c      	ldr	r5, [pc, #48]	; (8002494 <__libc_init_array+0x38>)
 8002462:	4c0d      	ldr	r4, [pc, #52]	; (8002498 <__libc_init_array+0x3c>)
 8002464:	1b64      	subs	r4, r4, r5
 8002466:	10a4      	asrs	r4, r4, #2
 8002468:	42a6      	cmp	r6, r4
 800246a:	d109      	bne.n	8002480 <__libc_init_array+0x24>
 800246c:	2600      	movs	r6, #0
 800246e:	f000 f821 	bl	80024b4 <_init>
 8002472:	4d0a      	ldr	r5, [pc, #40]	; (800249c <__libc_init_array+0x40>)
 8002474:	4c0a      	ldr	r4, [pc, #40]	; (80024a0 <__libc_init_array+0x44>)
 8002476:	1b64      	subs	r4, r4, r5
 8002478:	10a4      	asrs	r4, r4, #2
 800247a:	42a6      	cmp	r6, r4
 800247c:	d105      	bne.n	800248a <__libc_init_array+0x2e>
 800247e:	bd70      	pop	{r4, r5, r6, pc}
 8002480:	00b3      	lsls	r3, r6, #2
 8002482:	58eb      	ldr	r3, [r5, r3]
 8002484:	4798      	blx	r3
 8002486:	3601      	adds	r6, #1
 8002488:	e7ee      	b.n	8002468 <__libc_init_array+0xc>
 800248a:	00b3      	lsls	r3, r6, #2
 800248c:	58eb      	ldr	r3, [r5, r3]
 800248e:	4798      	blx	r3
 8002490:	3601      	adds	r6, #1
 8002492:	e7f2      	b.n	800247a <__libc_init_array+0x1e>
 8002494:	08002560 	.word	0x08002560
 8002498:	08002560 	.word	0x08002560
 800249c:	08002560 	.word	0x08002560
 80024a0:	08002564 	.word	0x08002564

080024a4 <memset>:
 80024a4:	0003      	movs	r3, r0
 80024a6:	1882      	adds	r2, r0, r2
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d100      	bne.n	80024ae <memset+0xa>
 80024ac:	4770      	bx	lr
 80024ae:	7019      	strb	r1, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	e7f9      	b.n	80024a8 <memset+0x4>

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
