
StopMeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f8  080018f8  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080018f8  080018f8  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f8  080018f8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000034  08001934  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001934  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c66f  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  0002c6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b92f  00000000  00000000  0002e4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  00039e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001438  00000000  00000000  0003a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000122f9  00000000  00000000  0003b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f110  00000000  00000000  0004dca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007432a  00000000  00000000  0005cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d10db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016e0  00000000  00000000  000d112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800184c 	.word	0x0800184c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	0800184c 	.word	0x0800184c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <gameSetLeds>:

uint8_t ledBuffer;

void gameSetLeds(uint8_t _led)
{
	ledBuffer = _led;
 8000220:	4b01      	ldr	r3, [pc, #4]	; (8000228 <gameSetLeds+0x8>)
 8000222:	7018      	strb	r0, [r3, #0]
}
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	20000051 	.word	0x20000051

0800022c <gameUpdateLedBuffer>:

void gameUpdateLedBuffer()
{
    if (ledBuffer & (1 << 3))
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <gameUpdateLedBuffer+0x30>)
 800022e:	7819      	ldrb	r1, [r3, #0]
 8000230:	070b      	lsls	r3, r1, #28
 8000232:	d50d      	bpl.n	8000250 <gameUpdateLedBuffer+0x24>
    {
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 8000234:	23a0      	movs	r3, #160	; 0xa0
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	619a      	str	r2, [r3, #24]
    else
    {
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
    }

    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800023e:	2338      	movs	r3, #56	; 0x38
 8000240:	104a      	asrs	r2, r1, #1
 8000242:	4013      	ands	r3, r2
 8000244:	2207      	movs	r2, #7
 8000246:	400a      	ands	r2, r1
 8000248:	4313      	orrs	r3, r2
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <gameUpdateLedBuffer+0x34>)
 800024c:	7013      	strb	r3, [r2, #0]
}
 800024e:	4770      	bx	lr
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000250:	23a0      	movs	r3, #160	; 0xa0
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
 800025a:	e7f0      	b.n	800023e <gameUpdateLedBuffer+0x12>
 800025c:	20000051 	.word	0x20000051
 8000260:	20000052 	.word	0x20000052

08000264 <gameShowStartAnimation>:
        {
            ledBuffer |= (1 << i);
            gameUpdateLedBuffer();
            HAL_Delay(100);
        }
        for (i = 0; i < 7; i++)
 8000264:	2302      	movs	r3, #2
{
 8000266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000268:	4646      	mov	r6, r8
 800026a:	46d6      	mov	lr, sl
 800026c:	464f      	mov	r7, r9
        for (i = 0; i < 7; i++)
 800026e:	469a      	mov	sl, r3
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <gameShowStartAnimation+0xc4>)
{
 8000272:	b5c0      	push	{r6, r7, lr}
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000274:	27a0      	movs	r7, #160	; 0xa0
 8000276:	4698      	mov	r8, r3
            ledBuffer |= (1 << i);
 8000278:	2601      	movs	r6, #1
 800027a:	4d2c      	ldr	r5, [pc, #176]	; (800032c <gameShowStartAnimation+0xc8>)
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800027c:	05ff      	lsls	r7, r7, #23
    if (ledBuffer & (1 << 3))
 800027e:	2308      	movs	r3, #8
        for (i = 0; i < 7; i++)
 8000280:	2400      	movs	r4, #0
    if (ledBuffer & (1 << 3))
 8000282:	4699      	mov	r9, r3
 8000284:	e010      	b.n	80002a8 <gameShowStartAnimation+0x44>
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0109      	lsls	r1, r1, #4
 800028a:	61b9      	str	r1, [r7, #24]
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800028c:	2138      	movs	r1, #56	; 0x38
 800028e:	105b      	asrs	r3, r3, #1
 8000290:	400b      	ands	r3, r1
 8000292:	3931      	subs	r1, #49	; 0x31
 8000294:	400a      	ands	r2, r1
 8000296:	4313      	orrs	r3, r2
 8000298:	4642      	mov	r2, r8
            HAL_Delay(100);
 800029a:	2064      	movs	r0, #100	; 0x64
        for (i = 0; i < 7; i++)
 800029c:	3401      	adds	r4, #1
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800029e:	7013      	strb	r3, [r2, #0]
            HAL_Delay(100);
 80002a0:	f000 fbae 	bl	8000a00 <HAL_Delay>
        for (i = 0; i < 7; i++)
 80002a4:	2c07      	cmp	r4, #7
 80002a6:	d00d      	beq.n	80002c4 <gameShowStartAnimation+0x60>
            ledBuffer |= (1 << i);
 80002a8:	0033      	movs	r3, r6
 80002aa:	40a3      	lsls	r3, r4
    if (ledBuffer & (1 << 3))
 80002ac:	4649      	mov	r1, r9
            ledBuffer |= (1 << i);
 80002ae:	782a      	ldrb	r2, [r5, #0]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25a      	sxtb	r2, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	702b      	strb	r3, [r5, #0]
    if (ledBuffer & (1 << 3))
 80002b8:	4219      	tst	r1, r3
 80002ba:	d1e4      	bne.n	8000286 <gameShowStartAnimation+0x22>
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	0109      	lsls	r1, r1, #4
 80002c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80002c2:	e7e3      	b.n	800028c <gameShowStartAnimation+0x28>
    if (ledBuffer & (1 << 3))
 80002c4:	2308      	movs	r3, #8
        for (i = 0; i < 7; i++)
 80002c6:	2400      	movs	r4, #0
    if (ledBuffer & (1 << 3))
 80002c8:	4699      	mov	r9, r3
 80002ca:	e010      	b.n	80002ee <gameShowStartAnimation+0x8a>
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 80002cc:	2180      	movs	r1, #128	; 0x80
 80002ce:	0109      	lsls	r1, r1, #4
 80002d0:	61b9      	str	r1, [r7, #24]
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80002d2:	2138      	movs	r1, #56	; 0x38
 80002d4:	105b      	asrs	r3, r3, #1
 80002d6:	400b      	ands	r3, r1
 80002d8:	3931      	subs	r1, #49	; 0x31
 80002da:	400a      	ands	r2, r1
 80002dc:	4313      	orrs	r3, r2
 80002de:	4642      	mov	r2, r8
        {
            ledBuffer &= ~(1 << i);
            gameUpdateLedBuffer();
            HAL_Delay(100);
 80002e0:	2064      	movs	r0, #100	; 0x64
        for (i = 0; i < 7; i++)
 80002e2:	3401      	adds	r4, #1
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80002e4:	7013      	strb	r3, [r2, #0]
            HAL_Delay(100);
 80002e6:	f000 fb8b 	bl	8000a00 <HAL_Delay>
        for (i = 0; i < 7; i++)
 80002ea:	2c07      	cmp	r4, #7
 80002ec:	d00c      	beq.n	8000308 <gameShowStartAnimation+0xa4>
            ledBuffer &= ~(1 << i);
 80002ee:	0032      	movs	r2, r6
 80002f0:	40a2      	lsls	r2, r4
    if (ledBuffer & (1 << 3))
 80002f2:	4649      	mov	r1, r9
            ledBuffer &= ~(1 << i);
 80002f4:	782b      	ldrb	r3, [r5, #0]
 80002f6:	4393      	bics	r3, r2
 80002f8:	b25a      	sxtb	r2, r3
 80002fa:	702b      	strb	r3, [r5, #0]
    if (ledBuffer & (1 << 3))
 80002fc:	4219      	tst	r1, r3
 80002fe:	d1e5      	bne.n	80002cc <gameShowStartAnimation+0x68>
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0109      	lsls	r1, r1, #4
 8000304:	62b9      	str	r1, [r7, #40]	; 0x28
 8000306:	e7e4      	b.n	80002d2 <gameShowStartAnimation+0x6e>
    for (j = 0; j < 2; j++)
 8000308:	4653      	mov	r3, sl
 800030a:	2b01      	cmp	r3, #1
 800030c:	d002      	beq.n	8000314 <gameShowStartAnimation+0xb0>
 800030e:	2301      	movs	r3, #1
 8000310:	469a      	mov	sl, r3
 8000312:	e7b4      	b.n	800027e <gameShowStartAnimation+0x1a>
        }
    }
    HAL_Delay(1000);
 8000314:	20fa      	movs	r0, #250	; 0xfa
 8000316:	0080      	lsls	r0, r0, #2
 8000318:	f000 fb72 	bl	8000a00 <HAL_Delay>
}
 800031c:	bce0      	pop	{r5, r6, r7}
 800031e:	46ba      	mov	sl, r7
 8000320:	46b1      	mov	r9, r6
 8000322:	46a8      	mov	r8, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	20000052 	.word	0x20000052
 800032c:	20000051 	.word	0x20000051

08000330 <gameShowSuccAnimation>:

void gameShowSuccAnimation(void)
{
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    ledBuffer = 0;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <gameShowSuccAnimation+0x48>)
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000334:	26a0      	movs	r6, #160	; 0xa0
 8000336:	2780      	movs	r7, #128	; 0x80
{
 8000338:	46c6      	mov	lr, r8
    ledBuffer = 0;
 800033a:	2400      	movs	r4, #0
 800033c:	4698      	mov	r8, r3
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800033e:	4d0f      	ldr	r5, [pc, #60]	; (800037c <gameShowSuccAnimation+0x4c>)
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000340:	05f6      	lsls	r6, r6, #23
 8000342:	013f      	lsls	r7, r7, #4
{
 8000344:	b500      	push	{lr}
    gameUpdateLedBuffer();
    HAL_Delay(250);
 8000346:	20fa      	movs	r0, #250	; 0xfa
    ledBuffer = 0;
 8000348:	701c      	strb	r4, [r3, #0]
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800034a:	62b7      	str	r7, [r6, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800034c:	702c      	strb	r4, [r5, #0]
    HAL_Delay(250);
 800034e:	f000 fb57 	bl	8000a00 <HAL_Delay>
    for (i = 0; i < 1; i++)
    {
        ledBuffer = 1 << 3;
 8000352:	4642      	mov	r2, r8
 8000354:	2308      	movs	r3, #8
        gameUpdateLedBuffer();
        HAL_Delay(250);
 8000356:	20fa      	movs	r0, #250	; 0xfa
        ledBuffer = 1 << 3;
 8000358:	7013      	strb	r3, [r2, #0]
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 800035a:	61b7      	str	r7, [r6, #24]
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800035c:	702c      	strb	r4, [r5, #0]
        HAL_Delay(250);
 800035e:	f000 fb4f 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0;
 8000362:	4643      	mov	r3, r8
        gameUpdateLedBuffer();
        HAL_Delay(250);
 8000364:	20fa      	movs	r0, #250	; 0xfa
        ledBuffer = 0;
 8000366:	701c      	strb	r4, [r3, #0]
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000368:	62b7      	str	r7, [r6, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800036a:	702c      	strb	r4, [r5, #0]
        HAL_Delay(250);
 800036c:	f000 fb48 	bl	8000a00 <HAL_Delay>
    }
}
 8000370:	bc80      	pop	{r7}
 8000372:	46b8      	mov	r8, r7
 8000374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	20000051 	.word	0x20000051
 800037c:	20000052 	.word	0x20000052

08000380 <gameShowFailAnimation>:
void gameShowFailAnimation(void)
{
    int i;
    for (i = 0; i < 2; i++)
    {
        ledBuffer = 0b01111111;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <gameShowFailAnimation+0x6c>)
{
 8000382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000384:	4646      	mov	r6, r8
        ledBuffer = 0b01111111;
 8000386:	4698      	mov	r8, r3
 8000388:	237f      	movs	r3, #127	; 0x7f
{
 800038a:	46d6      	mov	lr, sl
        ledBuffer = 0b01111111;
 800038c:	469a      	mov	sl, r3
{
 800038e:	464f      	mov	r7, r9
        ledBuffer = 0b01111111;
 8000390:	4652      	mov	r2, sl
 8000392:	4643      	mov	r3, r8
{
 8000394:	b5c0      	push	{r6, r7, lr}
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 8000396:	26a0      	movs	r6, #160	; 0xa0
 8000398:	2780      	movs	r7, #128	; 0x80
        ledBuffer = 0b01111111;
 800039a:	701a      	strb	r2, [r3, #0]
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800039c:	233f      	movs	r3, #63	; 0x3f
 800039e:	4c14      	ldr	r4, [pc, #80]	; (80003f0 <gameShowFailAnimation+0x70>)
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 80003a0:	05f6      	lsls	r6, r6, #23
 80003a2:	013f      	lsls	r7, r7, #4
 80003a4:	61b7      	str	r7, [r6, #24]
        gameUpdateLedBuffer();
        HAL_Delay(250);
 80003a6:	20fa      	movs	r0, #250	; 0xfa
        ledBuffer = 0;
 80003a8:	2500      	movs	r5, #0
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80003aa:	4699      	mov	r9, r3
 80003ac:	7023      	strb	r3, [r4, #0]
        HAL_Delay(250);
 80003ae:	f000 fb27 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0;
 80003b2:	4643      	mov	r3, r8
        gameUpdateLedBuffer();
        HAL_Delay(250);
 80003b4:	20fa      	movs	r0, #250	; 0xfa
        ledBuffer = 0;
 80003b6:	701d      	strb	r5, [r3, #0]
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80003b8:	62b7      	str	r7, [r6, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80003ba:	7025      	strb	r5, [r4, #0]
        HAL_Delay(250);
 80003bc:	f000 fb20 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0b01111111;
 80003c0:	4652      	mov	r2, sl
 80003c2:	4643      	mov	r3, r8
 80003c4:	701a      	strb	r2, [r3, #0]
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80003c6:	464b      	mov	r3, r9
    	NET_D3_PORT->BSRR = (1 << NET_D3_PIN);
 80003c8:	61b7      	str	r7, [r6, #24]
        HAL_Delay(250);
 80003ca:	20fa      	movs	r0, #250	; 0xfa
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80003cc:	7023      	strb	r3, [r4, #0]
        HAL_Delay(250);
 80003ce:	f000 fb17 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0;
 80003d2:	4643      	mov	r3, r8
        HAL_Delay(250);
 80003d4:	20fa      	movs	r0, #250	; 0xfa
        ledBuffer = 0;
 80003d6:	701d      	strb	r5, [r3, #0]
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80003d8:	62b7      	str	r7, [r6, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80003da:	7025      	strb	r5, [r4, #0]
        HAL_Delay(250);
 80003dc:	f000 fb10 	bl	8000a00 <HAL_Delay>
    }
}
 80003e0:	bce0      	pop	{r5, r6, r7}
 80003e2:	46ba      	mov	sl, r7
 80003e4:	46b1      	mov	r9, r6
 80003e6:	46a8      	mov	r8, r5
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	20000051 	.word	0x20000051
 80003f0:	20000052 	.word	0x20000052

080003f4 <gameShowResult>:

void gameShowResult(uint8_t _r)
{
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	4657      	mov	r7, sl
 80003f8:	46de      	mov	lr, fp
 80003fa:	464e      	mov	r6, r9
 80003fc:	4645      	mov	r5, r8
 80003fe:	4682      	mov	sl, r0
 8000400:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t _blinks;
    uint8_t i;
    _blinks = _r / 100;
    for (i = 0; i < _blinks; i++)
 8000402:	2863      	cmp	r0, #99	; 0x63
 8000404:	d922      	bls.n	800044c <gameShowResult+0x58>
    _blinks = _r / 100;
 8000406:	2164      	movs	r1, #100	; 0x64
 8000408:	f7ff fe7e 	bl	8000108 <__udivsi3>
 800040c:	b2c3      	uxtb	r3, r0
 800040e:	469b      	mov	fp, r3
    for (i = 0; i < _blinks; i++)
 8000410:	2300      	movs	r3, #0
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000412:	27a0      	movs	r7, #160	; 0xa0
    for (i = 0; i < _blinks; i++)
 8000414:	4699      	mov	r9, r3
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000416:	2480      	movs	r4, #128	; 0x80
    {
        ledBuffer = 1 << 0;
 8000418:	3301      	adds	r3, #1
 800041a:	4698      	mov	r8, r3
 800041c:	4e34      	ldr	r6, [pc, #208]	; (80004f0 <gameShowResult+0xfc>)
 800041e:	4d35      	ldr	r5, [pc, #212]	; (80004f4 <gameShowResult+0x100>)
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000420:	05ff      	lsls	r7, r7, #23
 8000422:	0124      	lsls	r4, r4, #4
        ledBuffer = 1 << 0;
 8000424:	4643      	mov	r3, r8
        gameUpdateLedBuffer();
        HAL_Delay(SCORE_BLINK_ON);
 8000426:	20c8      	movs	r0, #200	; 0xc8
        ledBuffer = 1 << 0;
 8000428:	7033      	strb	r3, [r6, #0]
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800042a:	62bc      	str	r4, [r7, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800042c:	702b      	strb	r3, [r5, #0]
        HAL_Delay(SCORE_BLINK_ON);
 800042e:	f000 fae7 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0;
 8000432:	2300      	movs	r3, #0
        gameUpdateLedBuffer();
        HAL_Delay(SCORE_BLINK_OFF);
 8000434:	20c8      	movs	r0, #200	; 0xc8
        ledBuffer = 0;
 8000436:	7033      	strb	r3, [r6, #0]
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000438:	62bc      	str	r4, [r7, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800043a:	702b      	strb	r3, [r5, #0]
        HAL_Delay(SCORE_BLINK_OFF);
 800043c:	f000 fae0 	bl	8000a00 <HAL_Delay>
    for (i = 0; i < _blinks; i++)
 8000440:	464b      	mov	r3, r9
 8000442:	2201      	movs	r2, #1
 8000444:	3301      	adds	r3, #1
 8000446:	4691      	mov	r9, r2
 8000448:	459b      	cmp	fp, r3
 800044a:	d8eb      	bhi.n	8000424 <gameShowResult+0x30>
    }

    _blinks = _r / 10 % 10;
 800044c:	210a      	movs	r1, #10
 800044e:	4650      	mov	r0, sl
 8000450:	f7ff fe5a 	bl	8000108 <__udivsi3>
 8000454:	210a      	movs	r1, #10
 8000456:	b2c0      	uxtb	r0, r0
 8000458:	f7ff fedc 	bl	8000214 <__aeabi_uidivmod>
 800045c:	b2cb      	uxtb	r3, r1
 800045e:	4699      	mov	r9, r3
    for (i = 0; i < _blinks; i++)
 8000460:	2b00      	cmp	r3, #0
 8000462:	d01b      	beq.n	800049c <gameShowResult+0xa8>
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000464:	23a0      	movs	r3, #160	; 0xa0
 8000466:	2780      	movs	r7, #128	; 0x80
 8000468:	05db      	lsls	r3, r3, #23
    for (i = 0; i < _blinks; i++)
 800046a:	2400      	movs	r4, #0
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800046c:	4698      	mov	r8, r3
 800046e:	4e20      	ldr	r6, [pc, #128]	; (80004f0 <gameShowResult+0xfc>)
 8000470:	4d20      	ldr	r5, [pc, #128]	; (80004f4 <gameShowResult+0x100>)
 8000472:	013f      	lsls	r7, r7, #4
    {
        ledBuffer = 1 << 1;
 8000474:	2302      	movs	r3, #2
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000476:	4642      	mov	r2, r8
        ledBuffer = 1 << 1;
 8000478:	7033      	strb	r3, [r6, #0]
        gameUpdateLedBuffer();
        HAL_Delay(SCORE_BLINK_ON);
 800047a:	20c8      	movs	r0, #200	; 0xc8
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800047c:	6297      	str	r7, [r2, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 800047e:	702b      	strb	r3, [r5, #0]
        HAL_Delay(SCORE_BLINK_ON);
 8000480:	f000 fabe 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0;
 8000484:	2300      	movs	r3, #0
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 8000486:	4642      	mov	r2, r8
    for (i = 0; i < _blinks; i++)
 8000488:	3401      	adds	r4, #1
        ledBuffer = 0;
 800048a:	7033      	strb	r3, [r6, #0]
        gameUpdateLedBuffer();
        HAL_Delay(SCORE_BLINK_OFF);
 800048c:	20c8      	movs	r0, #200	; 0xc8
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 800048e:	6297      	str	r7, [r2, #40]	; 0x28
    for (i = 0; i < _blinks; i++)
 8000490:	b2e4      	uxtb	r4, r4
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 8000492:	702b      	strb	r3, [r5, #0]
        HAL_Delay(SCORE_BLINK_OFF);
 8000494:	f000 fab4 	bl	8000a00 <HAL_Delay>
    for (i = 0; i < _blinks; i++)
 8000498:	45a1      	cmp	r9, r4
 800049a:	d1eb      	bne.n	8000474 <gameShowResult+0x80>
    }

    _blinks = _r % 10;
 800049c:	210a      	movs	r1, #10
 800049e:	4650      	mov	r0, sl
 80004a0:	f7ff feb8 	bl	8000214 <__aeabi_uidivmod>
 80004a4:	b2cb      	uxtb	r3, r1
 80004a6:	4699      	mov	r9, r3
    for (i = 0; i < _blinks; i++)
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d01b      	beq.n	80004e4 <gameShowResult+0xf0>
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	2780      	movs	r7, #128	; 0x80
 80004b0:	05db      	lsls	r3, r3, #23
    for (i = 0; i < _blinks; i++)
 80004b2:	2400      	movs	r4, #0
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80004b4:	4698      	mov	r8, r3
 80004b6:	4e0e      	ldr	r6, [pc, #56]	; (80004f0 <gameShowResult+0xfc>)
 80004b8:	4d0e      	ldr	r5, [pc, #56]	; (80004f4 <gameShowResult+0x100>)
 80004ba:	013f      	lsls	r7, r7, #4
    {
        ledBuffer = 1 << 2;
 80004bc:	2304      	movs	r3, #4
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80004be:	4642      	mov	r2, r8
        ledBuffer = 1 << 2;
 80004c0:	7033      	strb	r3, [r6, #0]
        gameUpdateLedBuffer();
        HAL_Delay(SCORE_BLINK_ON);
 80004c2:	20c8      	movs	r0, #200	; 0xc8
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80004c4:	6297      	str	r7, [r2, #40]	; 0x28
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80004c6:	702b      	strb	r3, [r5, #0]
        HAL_Delay(SCORE_BLINK_ON);
 80004c8:	f000 fa9a 	bl	8000a00 <HAL_Delay>
        ledBuffer = 0;
 80004cc:	2300      	movs	r3, #0
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80004ce:	4642      	mov	r2, r8
    for (i = 0; i < _blinks; i++)
 80004d0:	3401      	adds	r4, #1
        ledBuffer = 0;
 80004d2:	7033      	strb	r3, [r6, #0]
        gameUpdateLedBuffer();
        HAL_Delay(SCORE_BLINK_OFF);
 80004d4:	20c8      	movs	r0, #200	; 0xc8
    	NET_D3_PORT->BRR = (1 << NET_D3_PIN);
 80004d6:	6297      	str	r7, [r2, #40]	; 0x28
    for (i = 0; i < _blinks; i++)
 80004d8:	b2e4      	uxtb	r4, r4
    ledBufferCharile = (ledBuffer & 0b00000111) | ((ledBuffer & 0b01110000) >> 1);
 80004da:	702b      	strb	r3, [r5, #0]
        HAL_Delay(SCORE_BLINK_OFF);
 80004dc:	f000 fa90 	bl	8000a00 <HAL_Delay>
    for (i = 0; i < _blinks; i++)
 80004e0:	45a1      	cmp	r9, r4
 80004e2:	d1eb      	bne.n	80004bc <gameShowResult+0xc8>
    }
}
 80004e4:	bcf0      	pop	{r4, r5, r6, r7}
 80004e6:	46bb      	mov	fp, r7
 80004e8:	46b2      	mov	sl, r6
 80004ea:	46a9      	mov	r9, r5
 80004ec:	46a0      	mov	r8, r4
 80004ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f0:	20000051 	.word	0x20000051
 80004f4:	20000052 	.word	0x20000052

080004f8 <gameTimerISR>:
void gameTimerISR()
{
    // Because we need to do this as quickly as possible, so we need to use registers

    // First, set all outputs connected to LEDs as inputs. Do not use HAL here, it's too slow.
	myLedPins[0].port->MODER &= ~(0b00000011 << (2 * myLedPins[0].pin));
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <gameTimerISR+0xdc>)
{
 80004fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	myLedPins[0].port->MODER &= ~(0b00000011 << (2 * myLedPins[0].pin));
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	681c      	ldr	r4, [r3, #0]
 8000500:	0050      	lsls	r0, r2, #1
 8000502:	2203      	movs	r2, #3
 8000504:	0015      	movs	r5, r2
 8000506:	4085      	lsls	r5, r0
 8000508:	6821      	ldr	r1, [r4, #0]
	myLedPins[1].port->MODER &= ~(0b00000011 << (2 * myLedPins[1].pin));
 800050a:	68d8      	ldr	r0, [r3, #12]
	myLedPins[0].port->MODER &= ~(0b00000011 << (2 * myLedPins[0].pin));
 800050c:	43a9      	bics	r1, r5
	myLedPins[1].port->MODER &= ~(0b00000011 << (2 * myLedPins[1].pin));
 800050e:	0015      	movs	r5, r2
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4085      	lsls	r5, r0
	myLedPins[2].port->MODER &= ~(0b00000011 << (2 * myLedPins[2].pin));
 8000514:	6958      	ldr	r0, [r3, #20]
	myLedPins[0].port->MODER &= ~(0b00000011 << (2 * myLedPins[0].pin));
 8000516:	6021      	str	r1, [r4, #0]
	myLedPins[2].port->MODER &= ~(0b00000011 << (2 * myLedPins[2].pin));
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4082      	lsls	r2, r0
	myLedPins[1].port->MODER &= ~(0b00000011 << (2 * myLedPins[1].pin));
 800051c:	689c      	ldr	r4, [r3, #8]
 800051e:	6821      	ldr	r1, [r4, #0]
 8000520:	43a9      	bics	r1, r5
 8000522:	6021      	str	r1, [r4, #0]
	myLedPins[2].port->MODER &= ~(0b00000011 << (2 * myLedPins[2].pin));
 8000524:	691c      	ldr	r4, [r3, #16]
 8000526:	6821      	ldr	r1, [r4, #0]
 8000528:	4391      	bics	r1, r2

    // Then check if you need to light up an LED
    if (ledBufferCharile & (1 << charlieplexCounter))
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <gameTimerISR+0xe0>)
	myLedPins[2].port->MODER &= ~(0b00000011 << (2 * myLedPins[2].pin));
 800052c:	6021      	str	r1, [r4, #0]
    if (ledBufferCharile & (1 << charlieplexCounter))
 800052e:	7810      	ldrb	r0, [r2, #0]
 8000530:	4a2a      	ldr	r2, [pc, #168]	; (80005dc <gameTimerISR+0xe4>)
 8000532:	7811      	ldrb	r1, [r2, #0]
 8000534:	4108      	asrs	r0, r1
 8000536:	2101      	movs	r1, #1
 8000538:	4201      	tst	r1, r0
 800053a:	d041      	beq.n	80005c0 <gameTimerISR+0xc8>
    {
    	myLedPins[myLedPairs[charlieplexCounter].led1].port->BSRR = (1 << (myLedPins[myLedPairs[charlieplexCounter].led1].pin));
 800053c:	000e      	movs	r6, r1
 800053e:	7814      	ldrb	r4, [r2, #0]
 8000540:	4827      	ldr	r0, [pc, #156]	; (80005e0 <gameTimerISR+0xe8>)
 8000542:	0064      	lsls	r4, r4, #1
 8000544:	5c24      	ldrb	r4, [r4, r0]
 8000546:	7815      	ldrb	r5, [r2, #0]
 8000548:	00e4      	lsls	r4, r4, #3
 800054a:	191c      	adds	r4, r3, r4
 800054c:	6864      	ldr	r4, [r4, #4]
 800054e:	006d      	lsls	r5, r5, #1
 8000550:	40a6      	lsls	r6, r4
 8000552:	5c2d      	ldrb	r5, [r5, r0]
 8000554:	00ed      	lsls	r5, r5, #3
 8000556:	58ed      	ldr	r5, [r5, r3]
 8000558:	61ae      	str	r6, [r5, #24]
    	myLedPins[myLedPairs[charlieplexCounter].led2].port->BRR = (1 << (myLedPins[myLedPairs[charlieplexCounter].led2].pin));
 800055a:	000e      	movs	r6, r1
 800055c:	7814      	ldrb	r4, [r2, #0]
 800055e:	7815      	ldrb	r5, [r2, #0]
 8000560:	0064      	lsls	r4, r4, #1
 8000562:	1904      	adds	r4, r0, r4
 8000564:	7864      	ldrb	r4, [r4, #1]
 8000566:	006d      	lsls	r5, r5, #1
 8000568:	00e4      	lsls	r4, r4, #3
 800056a:	191c      	adds	r4, r3, r4
 800056c:	6864      	ldr	r4, [r4, #4]
 800056e:	1945      	adds	r5, r0, r5
 8000570:	40a6      	lsls	r6, r4
 8000572:	786d      	ldrb	r5, [r5, #1]
 8000574:	00ed      	lsls	r5, r5, #3
 8000576:	58ed      	ldr	r5, [r5, r3]
 8000578:	62ae      	str	r6, [r5, #40]	; 0x28

    	myLedPins[myLedPairs[charlieplexCounter].led1].port->MODER |= (1 << (myLedPins[myLedPairs[charlieplexCounter].led1].pin) * 2);
 800057a:	7815      	ldrb	r5, [r2, #0]
 800057c:	7814      	ldrb	r4, [r2, #0]
 800057e:	006d      	lsls	r5, r5, #1
 8000580:	0064      	lsls	r4, r4, #1
 8000582:	5c24      	ldrb	r4, [r4, r0]
 8000584:	00e4      	lsls	r4, r4, #3
 8000586:	58e6      	ldr	r6, [r4, r3]
 8000588:	5c2c      	ldrb	r4, [r5, r0]
 800058a:	6837      	ldr	r7, [r6, #0]
 800058c:	00e4      	lsls	r4, r4, #3
 800058e:	191c      	adds	r4, r3, r4
 8000590:	6865      	ldr	r5, [r4, #4]
 8000592:	000c      	movs	r4, r1
 8000594:	006d      	lsls	r5, r5, #1
 8000596:	40ac      	lsls	r4, r5
 8000598:	433c      	orrs	r4, r7
 800059a:	6034      	str	r4, [r6, #0]
    	myLedPins[myLedPairs[charlieplexCounter].led2].port->MODER |= (1 << (myLedPins[myLedPairs[charlieplexCounter].led2].pin) * 2);
 800059c:	7816      	ldrb	r6, [r2, #0]
 800059e:	7814      	ldrb	r4, [r2, #0]
 80005a0:	0076      	lsls	r6, r6, #1
 80005a2:	0064      	lsls	r4, r4, #1
 80005a4:	1904      	adds	r4, r0, r4
 80005a6:	1980      	adds	r0, r0, r6
 80005a8:	7864      	ldrb	r4, [r4, #1]
 80005aa:	7840      	ldrb	r0, [r0, #1]
 80005ac:	00e4      	lsls	r4, r4, #3
 80005ae:	00c0      	lsls	r0, r0, #3
 80005b0:	58e4      	ldr	r4, [r4, r3]
 80005b2:	181b      	adds	r3, r3, r0
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	6825      	ldr	r5, [r4, #0]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4099      	lsls	r1, r3
 80005bc:	4329      	orrs	r1, r5
 80005be:	6021      	str	r1, [r4, #0]
    }
    charlieplexCounter++;
 80005c0:	7813      	ldrb	r3, [r2, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	7013      	strb	r3, [r2, #0]
    if (charlieplexCounter > 5)
 80005c8:	7813      	ldrb	r3, [r2, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d901      	bls.n	80005d2 <gameTimerISR+0xda>
        charlieplexCounter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	7013      	strb	r3, [r2, #0]
}
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	2000000c 	.word	0x2000000c
 80005d8:	20000052 	.word	0x20000052
 80005dc:	20000050 	.word	0x20000050
 80005e0:	20000000 	.word	0x20000000

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b500      	push	{lr}
 80005e6:	b08d      	sub	sp, #52	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e8:	2218      	movs	r2, #24
 80005ea:	2100      	movs	r1, #0
 80005ec:	a806      	add	r0, sp, #24
 80005ee:	f001 f925 	bl	800183c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f2:	2214      	movs	r2, #20
 80005f4:	2100      	movs	r1, #0
 80005f6:	4668      	mov	r0, sp
 80005f8:	f001 f920 	bl	800183c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	33fe      	adds	r3, #254	; 0xfe
 8000602:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f000 fb6e 	bl	8000cf0 <HAL_RCC_OscConfig>
 8000614:	2800      	cmp	r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061a:	e7fe      	b.n	800061a <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	2207      	movs	r2, #7
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000628:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	9202      	str	r2, [sp, #8]
 8000630:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000632:	f000 fcc1 	bl	8000fb8 <HAL_RCC_ClockConfig>
 8000636:	2800      	cmp	r0, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x5a>
 800063a:	b672      	cpsid	i
  while (1)
 800063c:	e7fe      	b.n	800063c <SystemClock_Config+0x58>
}
 800063e:	b00d      	add	sp, #52	; 0x34
 8000640:	bd00      	pop	{pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <main>:
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	46ce      	mov	lr, r9
 8000648:	4647      	mov	r7, r8
 800064a:	b580      	push	{r7, lr}
 800064c:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800064e:	f000 f9b9 	bl	80009c4 <HAL_Init>
  SystemClock_Config();
 8000652:	f7ff ffc7 	bl	80005e4 <SystemClock_Config>
  HAL_Delay(8000);
 8000656:	20fa      	movs	r0, #250	; 0xfa
 8000658:	0140      	lsls	r0, r0, #5
 800065a:	f000 f9d1 	bl	8000a00 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2214      	movs	r2, #20
 8000660:	2100      	movs	r1, #0
 8000662:	a802      	add	r0, sp, #8
 8000664:	f001 f8ea 	bl	800183c <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	2202      	movs	r2, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b78      	ldr	r3, [pc, #480]	; (8000850 <main+0x20c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800066e:	4879      	ldr	r0, [pc, #484]	; (8000854 <main+0x210>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	6b59      	ldr	r1, [r3, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000672:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4311      	orrs	r1, r2
 8000676:	6359      	str	r1, [r3, #52]	; 0x34
 8000678:	6b59      	ldr	r1, [r3, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800067a:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	400a      	ands	r2, r1
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000684:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4322      	orrs	r2, r4
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
 800068a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4023      	ands	r3, r4
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000694:	f000 fb26 	bl	8000ce4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000698:	20a0      	movs	r0, #160	; 0xa0
 800069a:	2200      	movs	r2, #0
 800069c:	496e      	ldr	r1, [pc, #440]	; (8000858 <main+0x214>)
 800069e:	05c0      	lsls	r0, r0, #23
 80006a0:	f000 fb20 	bl	8000ce4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	486a      	ldr	r0, [pc, #424]	; (8000854 <main+0x210>)
 80006aa:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ac:	9202      	str	r2, [sp, #8]
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	9604      	str	r6, [sp, #16]
 80006b2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f000 fa14 	bl	8000ae0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80006ba:	2301      	movs	r3, #1
 80006bc:	4a66      	ldr	r2, [pc, #408]	; (8000858 <main+0x214>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	a902      	add	r1, sp, #8
 80006c0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80006c2:	9202      	str	r2, [sp, #8]
 80006c4:	9303      	str	r3, [sp, #12]
 80006c6:	9604      	str	r6, [sp, #16]
 80006c8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f000 fa09 	bl	8000ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ce:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006d2:	2300      	movs	r3, #0
 80006d4:	0192      	lsls	r2, r2, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	a902      	add	r1, sp, #8
 80006d8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006da:	9202      	str	r2, [sp, #8]
 80006dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006de:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f000 f9fe 	bl	8000ae0 <HAL_GPIO_Init>
  HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7|HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA11);
 80006e4:	2014      	movs	r0, #20
 80006e6:	f000 f99d 	bl	8000a24 <HAL_SYSCFG_SetPinBinding>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ea:	221c      	movs	r2, #28
 80006ec:	2100      	movs	r1, #0
 80006ee:	a802      	add	r0, sp, #8
 80006f0:	f001 f8a4 	bl	800183c <memset>
  htim14.Instance = TIM14;
 80006f4:	4c59      	ldr	r4, [pc, #356]	; (800085c <main+0x218>)
 80006f6:	4b5a      	ldr	r3, [pc, #360]	; (8000860 <main+0x21c>)
  htim14.Init.Period = 94;
 80006f8:	225e      	movs	r2, #94	; 0x5e
  htim14.Instance = TIM14;
 80006fa:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = 15;
 80006fc:	230f      	movs	r3, #15
 80006fe:	6063      	str	r3, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000702:	0020      	movs	r0, r4
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	60a3      	str	r3, [r4, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	6123      	str	r3, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000708:	3380      	adds	r3, #128	; 0x80
  htim14.Init.Period = 94;
 800070a:	60e2      	str	r2, [r4, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800070e:	f000 fd3f 	bl	8001190 <HAL_TIM_Base_Init>
 8000712:	2800      	cmp	r0, #0
 8000714:	d001      	beq.n	800071a <main+0xd6>
 8000716:	b672      	cpsid	i
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0xd4>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800071a:	0020      	movs	r0, r4
 800071c:	f000 fdda 	bl	80012d4 <HAL_TIM_OC_Init>
 8000720:	1e02      	subs	r2, r0, #0
 8000722:	d001      	beq.n	8000728 <main+0xe4>
 8000724:	b672      	cpsid	i
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0xe2>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	9004      	str	r0, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072a:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072c:	a902      	add	r1, sp, #8
 800072e:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000730:	9602      	str	r6, [sp, #8]
 8000732:	9703      	str	r7, [sp, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000734:	f000 fe40 	bl	80013b8 <HAL_TIM_OC_ConfigChannel>
 8000738:	2800      	cmp	r0, #0
 800073a:	d001      	beq.n	8000740 <main+0xfc>
 800073c:	b672      	cpsid	i
  while (1)
 800073e:	e7fe      	b.n	800073e <main+0xfa>
  HAL_TIM_Base_Start_IT(&htim14);
 8000740:	0020      	movs	r0, r4
 8000742:	f000 fd97 	bl	8001274 <HAL_TIM_Base_Start_IT>
  gameShowStartAnimation();
 8000746:	f7ff fd8d 	bl	8000264 <gameShowStartAnimation>
 800074a:	4a46      	ldr	r2, [pc, #280]	; (8000864 <main+0x220>)
	    gameSetLeds(1 << i);
 800074c:	2701      	movs	r7, #1
 800074e:	4690      	mov	r8, r2
 8000750:	4a45      	ldr	r2, [pc, #276]	; (8000868 <main+0x224>)
 8000752:	4e46      	ldr	r6, [pc, #280]	; (800086c <main+0x228>)
 8000754:	4691      	mov	r9, r2
 8000756:	6833      	ldr	r3, [r6, #0]
 8000758:	4d45      	ldr	r5, [pc, #276]	; (8000870 <main+0x22c>)
 800075a:	0038      	movs	r0, r7
 800075c:	4098      	lsls	r0, r3
 800075e:	b2c0      	uxtb	r0, r0
 8000760:	f7ff fd5e 	bl	8000220 <gameSetLeds>
	    gameUpdateLedBuffer();
 8000764:	f7ff fd62 	bl	800022c <gameUpdateLedBuffer>
	    if (i >= 6)
 8000768:	6833      	ldr	r3, [r6, #0]
 800076a:	2b05      	cmp	r3, #5
 800076c:	dd3a      	ble.n	80007e4 <main+0x1a0>
	        down = 1;
 800076e:	4643      	mov	r3, r8
 8000770:	701f      	strb	r7, [r3, #0]
	    timeout = HAL_GetTick();
 8000772:	f000 f93f 	bl	80009f4 <HAL_GetTick>
 8000776:	0004      	movs	r4, r0
	    while (((uint32_t)(HAL_GetTick() - timeout) <= delayTime) && (HAL_GPIO_ReadPin(NET_D1_PORT, 1 << NET_D1_PIN) == GPIO_PIN_SET));
 8000778:	e007      	b.n	800078a <main+0x146>
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	20a0      	movs	r0, #160	; 0xa0
 800077e:	0189      	lsls	r1, r1, #6
 8000780:	05c0      	lsls	r0, r0, #23
 8000782:	f000 faa9 	bl	8000cd8 <HAL_GPIO_ReadPin>
 8000786:	2801      	cmp	r0, #1
 8000788:	d105      	bne.n	8000796 <main+0x152>
 800078a:	f000 f933 	bl	80009f4 <HAL_GetTick>
 800078e:	882b      	ldrh	r3, [r5, #0]
 8000790:	1b00      	subs	r0, r0, r4
 8000792:	4298      	cmp	r0, r3
 8000794:	d9f1      	bls.n	800077a <main+0x136>
	    if ((uint32_t)(HAL_GetTick() - timeout) <= delayTime)
 8000796:	f000 f92d 	bl	80009f4 <HAL_GetTick>
 800079a:	882b      	ldrh	r3, [r5, #0]
 800079c:	1b04      	subs	r4, r0, r4
 800079e:	429c      	cmp	r4, r3
 80007a0:	d907      	bls.n	80007b2 <main+0x16e>
	        down == 0 ? i++ : i--;
 80007a2:	4643      	mov	r3, r8
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d121      	bne.n	80007ee <main+0x1aa>
 80007aa:	6833      	ldr	r3, [r6, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	6033      	str	r3, [r6, #0]
 80007b0:	e7d3      	b.n	800075a <main+0x116>
	        while (HAL_GPIO_ReadPin(NET_D1_PORT, 1 << NET_D1_PIN) == GPIO_PIN_RESET)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	20a0      	movs	r0, #160	; 0xa0
 80007b6:	0189      	lsls	r1, r1, #6
 80007b8:	05c0      	lsls	r0, r0, #23
 80007ba:	f000 fa8d 	bl	8000cd8 <HAL_GPIO_ReadPin>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d0f7      	beq.n	80007b2 <main+0x16e>
	        if (i == 3)
 80007c2:	6833      	ldr	r3, [r6, #0]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d116      	bne.n	80007f6 <main+0x1b2>
	            gameShowSuccAnimation();
 80007c8:	f7ff fdb2 	bl	8000330 <gameShowSuccAnimation>
	            score++;
 80007cc:	464b      	mov	r3, r9
 80007ce:	464a      	mov	r2, r9
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	7013      	strb	r3, [r2, #0]
	            if (delayTime > 100)
 80007d6:	882b      	ldrh	r3, [r5, #0]
 80007d8:	2b64      	cmp	r3, #100	; 0x64
 80007da:	d928      	bls.n	800082e <main+0x1ea>
	                delayTime -= REACTION_TIME_STEP1;
 80007dc:	3b0a      	subs	r3, #10
 80007de:	802b      	strh	r3, [r5, #0]
	    gameSetLeds(1 << i);
 80007e0:	6833      	ldr	r3, [r6, #0]
 80007e2:	e7ba      	b.n	800075a <main+0x116>
	    if (i == 0)
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1c4      	bne.n	8000772 <main+0x12e>
	        down = 0;
 80007e8:	4642      	mov	r2, r8
 80007ea:	7013      	strb	r3, [r2, #0]
 80007ec:	e7c1      	b.n	8000772 <main+0x12e>
	        down == 0 ? i++ : i--;
 80007ee:	6833      	ldr	r3, [r6, #0]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	6033      	str	r3, [r6, #0]
 80007f4:	e7b1      	b.n	800075a <main+0x116>
	            HAL_Delay(500);
 80007f6:	20fa      	movs	r0, #250	; 0xfa
	            i = 0;
 80007f8:	2400      	movs	r4, #0
	            HAL_Delay(500);
 80007fa:	0040      	lsls	r0, r0, #1
	            i = 0;
 80007fc:	6034      	str	r4, [r6, #0]
	            HAL_Delay(500);
 80007fe:	f000 f8ff 	bl	8000a00 <HAL_Delay>
	            gameShowFailAnimation();
 8000802:	f7ff fdbd 	bl	8000380 <gameShowFailAnimation>
	            HAL_Delay(500);
 8000806:	20fa      	movs	r0, #250	; 0xfa
 8000808:	0040      	lsls	r0, r0, #1
 800080a:	f000 f8f9 	bl	8000a00 <HAL_Delay>
	            gameShowResult(score);
 800080e:	464b      	mov	r3, r9
 8000810:	7818      	ldrb	r0, [r3, #0]
 8000812:	f7ff fdef 	bl	80003f4 <gameShowResult>
	            HAL_Delay(500);
 8000816:	20fa      	movs	r0, #250	; 0xfa
 8000818:	0040      	lsls	r0, r0, #1
 800081a:	f000 f8f1 	bl	8000a00 <HAL_Delay>
	            score = 0;
 800081e:	464b      	mov	r3, r9
 8000820:	701c      	strb	r4, [r3, #0]
	            delayTime = 250;
 8000822:	23fa      	movs	r3, #250	; 0xfa
 8000824:	802b      	strh	r3, [r5, #0]
	            gameShowStartAnimation();
 8000826:	f7ff fd1d 	bl	8000264 <gameShowStartAnimation>
	    gameSetLeds(1 << i);
 800082a:	6833      	ldr	r3, [r6, #0]
 800082c:	e795      	b.n	800075a <main+0x116>
	            else if ((delayTime <= 100) && (delayTime > 30))
 800082e:	001a      	movs	r2, r3
 8000830:	3a1f      	subs	r2, #31
 8000832:	2a45      	cmp	r2, #69	; 0x45
 8000834:	d803      	bhi.n	800083e <main+0x1fa>
	                delayTime -= REACTION_TIME_STEP2;
 8000836:	3b05      	subs	r3, #5
 8000838:	802b      	strh	r3, [r5, #0]
	    gameSetLeds(1 << i);
 800083a:	6833      	ldr	r3, [r6, #0]
 800083c:	e78d      	b.n	800075a <main+0x116>
	            else if ((delayTime <= 30) && (delayTime > 5))
 800083e:	1f9a      	subs	r2, r3, #6
 8000840:	2a18      	cmp	r2, #24
 8000842:	d803      	bhi.n	800084c <main+0x208>
	                delayTime -= REACTION_TIME_STEP3;
 8000844:	3b01      	subs	r3, #1
 8000846:	802b      	strh	r3, [r5, #0]
	    gameSetLeds(1 << i);
 8000848:	6833      	ldr	r3, [r6, #0]
 800084a:	e786      	b.n	800075a <main+0x116>
 800084c:	6833      	ldr	r3, [r6, #0]
 800084e:	e784      	b.n	800075a <main+0x116>
 8000850:	40021000 	.word	0x40021000
 8000854:	50000400 	.word	0x50000400
 8000858:	00001801 	.word	0x00001801
 800085c:	20000054 	.word	0x20000054
 8000860:	40002000 	.word	0x40002000
 8000864:	20000053 	.word	0x20000053
 8000868:	200000a4 	.word	0x200000a4
 800086c:	200000a0 	.word	0x200000a0
 8000870:	20000024 	.word	0x20000024

08000874 <HAL_TIM_PeriodElapsedCallback>:
{
 8000874:	b510      	push	{r4, lr}
    gameTimerISR();
 8000876:	f7ff fe3f 	bl	80004f8 <gameTimerISR>
}
 800087a:	bd10      	pop	{r4, pc}

0800087c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087c:	2201      	movs	r2, #1
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_MspInit+0x2c>)
{
 8000880:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000884:	4311      	orrs	r1, r2
 8000886:	6419      	str	r1, [r3, #64]	; 0x40
 8000888:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800088a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	9200      	str	r2, [sp, #0]
 8000890:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000894:	0549      	lsls	r1, r1, #21
 8000896:	430a      	orrs	r2, r1
 8000898:	63da      	str	r2, [r3, #60]	; 0x3c
 800089a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800089c:	400b      	ands	r3, r1
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	b002      	add	sp, #8
 80008a4:	4770      	bx	lr
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b500      	push	{lr}
  if(htim_base->Instance==TIM14)
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008b0:	6802      	ldr	r2, [r0, #0]
{
 80008b2:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d001      	beq.n	80008bc <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80008b8:	b003      	add	sp, #12
 80008ba:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 80008bc:	2080      	movs	r0, #128	; 0x80
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_TIM_Base_MspInit+0x3c>)
 80008c0:	0200      	lsls	r0, r0, #8
 80008c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80008c4:	4301      	orrs	r1, r0
 80008c6:	6411      	str	r1, [r2, #64]	; 0x40
 80008c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80008ca:	2100      	movs	r1, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 80008cc:	4003      	ands	r3, r0
 80008ce:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 80008d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80008d6:	f000 f8ab 	bl	8000a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80008da:	2013      	movs	r0, #19
 80008dc:	f000 f8da 	bl	8000a94 <HAL_NVIC_EnableIRQ>
}
 80008e0:	e7ea      	b.n	80008b8 <HAL_TIM_Base_MspInit+0xc>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	40002000 	.word	0x40002000
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler>
 80008ee:	46c0      	nop			; (mov r8, r8)

080008f0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <HardFault_Handler>
 80008f2:	46c0      	nop			; (mov r8, r8)

080008f4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f4:	4770      	bx	lr
 80008f6:	46c0      	nop			; (mov r8, r8)

080008f8 <PendSV_Handler>:
 80008f8:	4770      	bx	lr
 80008fa:	46c0      	nop			; (mov r8, r8)

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 f86d 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000902:	bd10      	pop	{r4, pc}

08000904 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000904:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM14_IRQHandler+0xc>)
 8000908:	f000 feb2 	bl	8001670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800090c:	bd10      	pop	{r4, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000054 	.word	0x20000054

08000914 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	4b02      	ldr	r3, [pc, #8]	; (8000920 <SystemInit+0xc>)
 8000918:	0512      	lsls	r2, r2, #20
 800091a:	609a      	str	r2, [r3, #8]
#endif
}
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000928:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800092a:	e003      	b.n	8000934 <LoopCopyDataInit>

0800092c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800092e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000930:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000932:	3104      	adds	r1, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <LoopForever+0xa>)
  ldr r3, =_edata
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <LoopForever+0xe>)
  adds r2, r0, r1
 8000938:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800093a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800093c:	d3f6      	bcc.n	800092c <CopyDataInit>
  ldr r2, =_sbss
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <LoopForever+0x12>)
  b LoopFillZerobss
 8000940:	e002      	b.n	8000948 <LoopFillZerobss>

08000942 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  str  r3, [r2]
 8000944:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000946:	3204      	adds	r2, #4

08000948 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <LoopForever+0x16>)
  cmp r2, r3
 800094a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800094c:	d3f9      	bcc.n	8000942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800094e:	f7ff ffe1 	bl	8000914 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000952:	f000 ff4f 	bl	80017f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fe75 	bl	8000644 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000960:	08001900 	.word	0x08001900
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000968:	20000034 	.word	0x20000034
  ldr r2, =_sbss
 800096c:	20000034 	.word	0x20000034
  ldr r3, = _ebss
 8000970:	200000ac 	.word	0x200000ac

08000974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_IRQHandler>
	...

08000978 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_InitTick+0x40>)
{
 800097a:	b510      	push	{r4, lr}
  if (uwTickFreq != 0U)
 800097c:	6819      	ldr	r1, [r3, #0]
{
 800097e:	0004      	movs	r4, r0
  if (uwTickFreq != 0U)
 8000980:	2900      	cmp	r1, #0
 8000982:	d101      	bne.n	8000988 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000984:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000986:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000988:	20fa      	movs	r0, #250	; 0xfa
 800098a:	0080      	lsls	r0, r0, #2
 800098c:	f7ff fbbc 	bl	8000108 <__udivsi3>
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_InitTick+0x44>)
 8000992:	0001      	movs	r1, r0
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f7ff fbb7 	bl	8000108 <__udivsi3>
 800099a:	f000 f887 	bl	8000aac <HAL_SYSTICK_Config>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d1f0      	bne.n	8000984 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	2c03      	cmp	r4, #3
 80009a4:	d8ee      	bhi.n	8000984 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a6:	3801      	subs	r0, #1
 80009a8:	2200      	movs	r2, #0
 80009aa:	0021      	movs	r1, r4
 80009ac:	f000 f840 	bl	8000a30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_InitTick+0x48>)
 80009b2:	2000      	movs	r0, #0
 80009b4:	601c      	str	r4, [r3, #0]
  return status;
 80009b6:	e7e6      	b.n	8000986 <HAL_InitTick+0xe>
 80009b8:	2000002c 	.word	0x2000002c
 80009bc:	20000028 	.word	0x20000028
 80009c0:	20000030 	.word	0x20000030

080009c4 <HAL_Init>:
{
 80009c4:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff ffd6 	bl	8000978 <HAL_InitTick>
 80009cc:	1e04      	subs	r4, r0, #0
 80009ce:	d002      	beq.n	80009d6 <HAL_Init+0x12>
    status = HAL_ERROR;
 80009d0:	2401      	movs	r4, #1
}
 80009d2:	0020      	movs	r0, r4
 80009d4:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80009d6:	f7ff ff51 	bl	800087c <HAL_MspInit>
 80009da:	e7fa      	b.n	80009d2 <HAL_Init+0xe>

080009dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_IncTick+0x10>)
 80009de:	4904      	ldr	r1, [pc, #16]	; (80009f0 <HAL_IncTick+0x14>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	6809      	ldr	r1, [r1, #0]
 80009e4:	185b      	adds	r3, r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	4770      	bx	lr
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	200000a8 	.word	0x200000a8
 80009f0:	2000002c 	.word	0x2000002c

080009f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009f4:	4b01      	ldr	r3, [pc, #4]	; (80009fc <HAL_GetTick+0x8>)
 80009f6:	6818      	ldr	r0, [r3, #0]
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	200000a8 	.word	0x200000a8

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a04:	f7ff fff6 	bl	80009f4 <HAL_GetTick>
 8000a08:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	1c63      	adds	r3, r4, #1
 8000a0c:	d002      	beq.n	8000a14 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_Delay+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a14:	f7ff ffee 	bl	80009f4 <HAL_GetTick>
 8000a18:	1b40      	subs	r0, r0, r5
 8000a1a:	42a0      	cmp	r0, r4
 8000a1c:	d3fa      	bcc.n	8000a14 <HAL_Delay+0x14>
  {
  }
}
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	2000002c 	.word	0x2000002c

08000a24 <HAL_SYSCFG_SetPinBinding>:
  * @param  mux_cfg This parameter can be a combination of LL_PINMUX_xx defines
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
  WRITE_REG(SYSCFG->CFGR3, mux_cfg);
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <HAL_SYSCFG_SetPinBinding+0x8>)
 8000a26:	63d8      	str	r0, [r3, #60]	; 0x3c
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
}
 8000a28:	4770      	bx	lr
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40010000 	.word	0x40010000

08000a30 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a32:	2800      	cmp	r0, #0
 8000a34:	db14      	blt.n	8000a60 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_NVIC_SetPriority+0x5c>)
 8000a38:	2203      	movs	r2, #3
 8000a3a:	469c      	mov	ip, r3
 8000a3c:	23ff      	movs	r3, #255	; 0xff
 8000a3e:	0884      	lsrs	r4, r0, #2
 8000a40:	4010      	ands	r0, r2
 8000a42:	001a      	movs	r2, r3
 8000a44:	26c0      	movs	r6, #192	; 0xc0
 8000a46:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a48:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a4c:	400b      	ands	r3, r1
 8000a4e:	4083      	lsls	r3, r0
 8000a50:	00a4      	lsls	r4, r4, #2
 8000a52:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	00b6      	lsls	r6, r6, #2
 8000a56:	59a5      	ldr	r5, [r4, r6]
 8000a58:	4395      	bics	r5, r2
 8000a5a:	432b      	orrs	r3, r5
 8000a5c:	51a3      	str	r3, [r4, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_NVIC_SetPriority+0x60>)
 8000a62:	230f      	movs	r3, #15
 8000a64:	4694      	mov	ip, r2
 8000a66:	2203      	movs	r2, #3
 8000a68:	4003      	ands	r3, r0
 8000a6a:	4010      	ands	r0, r2
 8000a6c:	32fc      	adds	r2, #252	; 0xfc
 8000a6e:	0015      	movs	r5, r2
 8000a70:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	400a      	ands	r2, r1
 8000a78:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7a:	3b08      	subs	r3, #8
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4463      	add	r3, ip
 8000a82:	69dc      	ldr	r4, [r3, #28]
 8000a84:	43ac      	bics	r4, r5
 8000a86:	4322      	orrs	r2, r4
 8000a88:	61da      	str	r2, [r3, #28]
 8000a8a:	e7e8      	b.n	8000a5e <HAL_NVIC_SetPriority+0x2e>
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a94:	2800      	cmp	r0, #0
 8000a96:	db05      	blt.n	8000aa4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a98:	231f      	movs	r3, #31
 8000a9a:	4018      	ands	r0, r3
 8000a9c:	3b1e      	subs	r3, #30
 8000a9e:	4083      	lsls	r3, r0
 8000aa0:	4a01      	ldr	r2, [pc, #4]	; (8000aa8 <HAL_NVIC_EnableIRQ+0x14>)
 8000aa2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aa4:	4770      	bx	lr
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	1e43      	subs	r3, r0, #1
 8000ab0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d20e      	bcs.n	8000ad6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	6a03      	ldr	r3, [r0, #32]
 8000ac2:	0609      	lsls	r1, r1, #24
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ace:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	3307      	adds	r3, #7
 8000ad4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e010 	.word	0xe000e010
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	4645      	mov	r5, r8
 8000ae4:	46de      	mov	lr, fp
 8000ae6:	4657      	mov	r7, sl
 8000ae8:	464e      	mov	r6, r9
 8000aea:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000aec:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0U;
 8000aee:	2300      	movs	r3, #0
{
 8000af0:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d100      	bne.n	8000af8 <HAL_GPIO_Init+0x18>
 8000af6:	e086      	b.n	8000c06 <HAL_GPIO_Init+0x126>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000af8:	468c      	mov	ip, r1
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000afa:	2401      	movs	r4, #1
 8000afc:	0029      	movs	r1, r5
 8000afe:	409c      	lsls	r4, r3
 8000b00:	4021      	ands	r1, r4
 8000b02:	9101      	str	r1, [sp, #4]
    if (iocurrent != 0U)
 8000b04:	4225      	tst	r5, r4
 8000b06:	d079      	beq.n	8000bfc <HAL_GPIO_Init+0x11c>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b08:	4662      	mov	r2, ip
 8000b0a:	6852      	ldr	r2, [r2, #4]
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	0016      	movs	r6, r2
 8000b10:	438e      	bics	r6, r1
 8000b12:	46b1      	mov	r9, r6
 8000b14:	2e02      	cmp	r6, #2
 8000b16:	d100      	bne.n	8000b1a <HAL_GPIO_Init+0x3a>
 8000b18:	e07c      	b.n	8000c14 <HAL_GPIO_Init+0x134>
      tmp = GPIOx->MODER;
 8000b1a:	6801      	ldr	r1, [r0, #0]
 8000b1c:	005e      	lsls	r6, r3, #1
 8000b1e:	468a      	mov	sl, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b20:	2103      	movs	r1, #3
 8000b22:	40b1      	lsls	r1, r6
 8000b24:	468b      	mov	fp, r1
 8000b26:	43c9      	mvns	r1, r1
 8000b28:	465f      	mov	r7, fp
 8000b2a:	4688      	mov	r8, r1
 8000b2c:	4651      	mov	r1, sl
 8000b2e:	43b9      	bics	r1, r7
 8000b30:	468b      	mov	fp, r1
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b32:	2103      	movs	r1, #3
 8000b34:	4011      	ands	r1, r2
 8000b36:	40b1      	lsls	r1, r6
 8000b38:	468a      	mov	sl, r1
 8000b3a:	4659      	mov	r1, fp
 8000b3c:	4657      	mov	r7, sl
 8000b3e:	4339      	orrs	r1, r7
      GPIOx->MODER = tmp;
 8000b40:	6001      	str	r1, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b42:	2101      	movs	r1, #1
 8000b44:	4249      	negs	r1, r1
 8000b46:	468a      	mov	sl, r1
 8000b48:	44d1      	add	r9, sl
 8000b4a:	4649      	mov	r1, r9
 8000b4c:	2901      	cmp	r1, #1
 8000b4e:	d800      	bhi.n	8000b52 <HAL_GPIO_Init+0x72>
 8000b50:	e08e      	b.n	8000c70 <HAL_GPIO_Init+0x190>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b52:	2a03      	cmp	r2, #3
 8000b54:	d052      	beq.n	8000bfc <HAL_GPIO_Init+0x11c>
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b56:	4641      	mov	r1, r8
        tmp = GPIOx->PUPDR;
 8000b58:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b5a:	4021      	ands	r1, r4
 8000b5c:	4688      	mov	r8, r1
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000b5e:	4661      	mov	r1, ip
 8000b60:	688c      	ldr	r4, [r1, #8]
 8000b62:	4641      	mov	r1, r8
 8000b64:	40b4      	lsls	r4, r6
 8000b66:	430c      	orrs	r4, r1
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0549      	lsls	r1, r1, #21
        GPIOx->PUPDR = tmp;
 8000b6c:	60c4      	str	r4, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6e:	420a      	tst	r2, r1
 8000b70:	d044      	beq.n	8000bfc <HAL_GPIO_Init+0x11c>
        tmp = EXTI->EXTICR[position >> 2U];
 8000b72:	4955      	ldr	r1, [pc, #340]	; (8000cc8 <HAL_GPIO_Init+0x1e8>)
 8000b74:	089c      	lsrs	r4, r3, #2
 8000b76:	4688      	mov	r8, r1
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b78:	2103      	movs	r1, #3
 8000b7a:	4019      	ands	r1, r3
 8000b7c:	00c9      	lsls	r1, r1, #3
 8000b7e:	00a4      	lsls	r4, r4, #2
 8000b80:	4444      	add	r4, r8
 8000b82:	4688      	mov	r8, r1
 8000b84:	210f      	movs	r1, #15
 8000b86:	4647      	mov	r7, r8
 8000b88:	40b9      	lsls	r1, r7
        tmp = EXTI->EXTICR[position >> 2U];
 8000b8a:	6e26      	ldr	r6, [r4, #96]	; 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b8c:	438e      	bics	r6, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b8e:	21a0      	movs	r1, #160	; 0xa0
 8000b90:	05c9      	lsls	r1, r1, #23
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d011      	beq.n	8000bba <HAL_GPIO_Init+0xda>
 8000b96:	494d      	ldr	r1, [pc, #308]	; (8000ccc <HAL_GPIO_Init+0x1ec>)
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	d100      	bne.n	8000b9e <HAL_GPIO_Init+0xbe>
 8000b9c:	e08f      	b.n	8000cbe <HAL_GPIO_Init+0x1de>
 8000b9e:	494c      	ldr	r1, [pc, #304]	; (8000cd0 <HAL_GPIO_Init+0x1f0>)
 8000ba0:	4689      	mov	r9, r1
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4548      	cmp	r0, r9
 8000ba6:	d005      	beq.n	8000bb4 <HAL_GPIO_Init+0xd4>
 8000ba8:	494a      	ldr	r1, [pc, #296]	; (8000cd4 <HAL_GPIO_Init+0x1f4>)
 8000baa:	4689      	mov	r9, r1
 8000bac:	2105      	movs	r1, #5
 8000bae:	4548      	cmp	r0, r9
 8000bb0:	d100      	bne.n	8000bb4 <HAL_GPIO_Init+0xd4>
 8000bb2:	e080      	b.n	8000cb6 <HAL_GPIO_Init+0x1d6>
 8000bb4:	4647      	mov	r7, r8
 8000bb6:	40b9      	lsls	r1, r7
 8000bb8:	430e      	orrs	r6, r1
        tmp = EXTI->IMR1;
 8000bba:	2180      	movs	r1, #128	; 0x80
        EXTI->EXTICR[position >> 2U] = tmp;
 8000bbc:	6626      	str	r6, [r4, #96]	; 0x60
        tmp = EXTI->IMR1;
 8000bbe:	4c42      	ldr	r4, [pc, #264]	; (8000cc8 <HAL_GPIO_Init+0x1e8>)
 8000bc0:	5864      	ldr	r4, [r4, r1]
        tmp &= ~((uint32_t)iocurrent);
 8000bc2:	9901      	ldr	r1, [sp, #4]
 8000bc4:	43ce      	mvns	r6, r1
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc6:	03d1      	lsls	r1, r2, #15
 8000bc8:	d500      	bpl.n	8000bcc <HAL_GPIO_Init+0xec>
 8000bca:	e071      	b.n	8000cb0 <HAL_GPIO_Init+0x1d0>
        tmp &= ~((uint32_t)iocurrent);
 8000bcc:	4034      	ands	r4, r6
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	4f3d      	ldr	r7, [pc, #244]	; (8000cc8 <HAL_GPIO_Init+0x1e8>)
 8000bd2:	507c      	str	r4, [r7, r1]

        tmp = EXTI->EMR1;
 8000bd4:	2484      	movs	r4, #132	; 0x84
 8000bd6:	593c      	ldr	r4, [r7, r4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd8:	0391      	lsls	r1, r2, #14
 8000bda:	d466      	bmi.n	8000caa <HAL_GPIO_Init+0x1ca>
        tmp &= ~((uint32_t)iocurrent);
 8000bdc:	4034      	ands	r4, r6
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 8000bde:	2184      	movs	r1, #132	; 0x84
 8000be0:	4f39      	ldr	r7, [pc, #228]	; (8000cc8 <HAL_GPIO_Init+0x1e8>)
 8000be2:	507c      	str	r4, [r7, r1]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000be4:	683c      	ldr	r4, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be6:	02d1      	lsls	r1, r2, #11
 8000be8:	d45c      	bmi.n	8000ca4 <HAL_GPIO_Init+0x1c4>
        tmp &= ~((uint32_t)iocurrent);
 8000bea:	4034      	ands	r4, r6
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 8000bec:	4936      	ldr	r1, [pc, #216]	; (8000cc8 <HAL_GPIO_Init+0x1e8>)
 8000bee:	600c      	str	r4, [r1, #0]

        tmp = EXTI->FTSR1;
 8000bf0:	684c      	ldr	r4, [r1, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf2:	0292      	lsls	r2, r2, #10
 8000bf4:	d453      	bmi.n	8000c9e <HAL_GPIO_Init+0x1be>
        tmp &= ~((uint32_t)iocurrent);
 8000bf6:	4034      	ands	r4, r6
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 8000bf8:	4a33      	ldr	r2, [pc, #204]	; (8000cc8 <HAL_GPIO_Init+0x1e8>)
 8000bfa:	6054      	str	r4, [r2, #4]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bfc:	002a      	movs	r2, r5
      }
    }

    position++;
 8000bfe:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c00:	40da      	lsrs	r2, r3
 8000c02:	d000      	beq.n	8000c06 <HAL_GPIO_Init+0x126>
 8000c04:	e779      	b.n	8000afa <HAL_GPIO_Init+0x1a>
  }
}
 8000c06:	b003      	add	sp, #12
 8000c08:	bcf0      	pop	{r4, r5, r6, r7}
 8000c0a:	46bb      	mov	fp, r7
 8000c0c:	46b2      	mov	sl, r6
 8000c0e:	46a9      	mov	r9, r5
 8000c10:	46a0      	mov	r8, r4
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp = GPIOx->AFR[position >> 3U];
 8000c14:	08de      	lsrs	r6, r3, #3
 8000c16:	00b6      	lsls	r6, r6, #2
 8000c18:	46b0      	mov	r8, r6
 8000c1a:	4480      	add	r8, r0
 8000c1c:	4641      	mov	r1, r8
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000c1e:	2607      	movs	r6, #7
        tmp = GPIOx->AFR[position >> 3U];
 8000c20:	6a09      	ldr	r1, [r1, #32]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000c22:	401e      	ands	r6, r3
        tmp = GPIOx->AFR[position >> 3U];
 8000c24:	468a      	mov	sl, r1
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000c26:	00b1      	lsls	r1, r6, #2
 8000c28:	260f      	movs	r6, #15
 8000c2a:	4689      	mov	r9, r1
 8000c2c:	408e      	lsls	r6, r1
 8000c2e:	4651      	mov	r1, sl
 8000c30:	43b1      	bics	r1, r6
 8000c32:	468a      	mov	sl, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000c34:	4661      	mov	r1, ip
 8000c36:	690e      	ldr	r6, [r1, #16]
 8000c38:	210f      	movs	r1, #15
 8000c3a:	400e      	ands	r6, r1
 8000c3c:	4649      	mov	r1, r9
 8000c3e:	408e      	lsls	r6, r1
 8000c40:	4651      	mov	r1, sl
 8000c42:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = tmp;
 8000c44:	4641      	mov	r1, r8
 8000c46:	620e      	str	r6, [r1, #32]
      tmp = GPIOx->MODER;
 8000c48:	6801      	ldr	r1, [r0, #0]
 8000c4a:	005e      	lsls	r6, r3, #1
 8000c4c:	4689      	mov	r9, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c4e:	2103      	movs	r1, #3
 8000c50:	40b1      	lsls	r1, r6
 8000c52:	468a      	mov	sl, r1
 8000c54:	43c9      	mvns	r1, r1
 8000c56:	4657      	mov	r7, sl
 8000c58:	4688      	mov	r8, r1
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	43b9      	bics	r1, r7
 8000c5e:	468a      	mov	sl, r1
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c60:	2103      	movs	r1, #3
 8000c62:	4011      	ands	r1, r2
 8000c64:	40b1      	lsls	r1, r6
 8000c66:	4689      	mov	r9, r1
 8000c68:	4651      	mov	r1, sl
 8000c6a:	464f      	mov	r7, r9
 8000c6c:	4339      	orrs	r1, r7
      GPIOx->MODER = tmp;
 8000c6e:	6001      	str	r1, [r0, #0]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c70:	4647      	mov	r7, r8
        tmp = GPIOx->OSPEEDR;
 8000c72:	6881      	ldr	r1, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c74:	4039      	ands	r1, r7
 8000c76:	468a      	mov	sl, r1
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c78:	4661      	mov	r1, ip
 8000c7a:	68c9      	ldr	r1, [r1, #12]
 8000c7c:	40b1      	lsls	r1, r6
 8000c7e:	4689      	mov	r9, r1
 8000c80:	4651      	mov	r1, sl
 8000c82:	464f      	mov	r7, r9
 8000c84:	4339      	orrs	r1, r7
        GPIOx->OSPEEDR = tmp;
 8000c86:	6081      	str	r1, [r0, #8]
        tmp = GPIOx->OTYPER;
 8000c88:	6841      	ldr	r1, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c8a:	43a1      	bics	r1, r4
 8000c8c:	4689      	mov	r9, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	0914      	lsrs	r4, r2, #4
 8000c92:	400c      	ands	r4, r1
 8000c94:	409c      	lsls	r4, r3
 8000c96:	4649      	mov	r1, r9
 8000c98:	430c      	orrs	r4, r1
        GPIOx->OTYPER = tmp;
 8000c9a:	6044      	str	r4, [r0, #4]
 8000c9c:	e759      	b.n	8000b52 <HAL_GPIO_Init+0x72>
          tmp |= iocurrent;
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	4314      	orrs	r4, r2
 8000ca2:	e7a9      	b.n	8000bf8 <HAL_GPIO_Init+0x118>
          tmp |= iocurrent;
 8000ca4:	9901      	ldr	r1, [sp, #4]
 8000ca6:	430c      	orrs	r4, r1
 8000ca8:	e7a0      	b.n	8000bec <HAL_GPIO_Init+0x10c>
          tmp |= iocurrent;
 8000caa:	9901      	ldr	r1, [sp, #4]
 8000cac:	430c      	orrs	r4, r1
 8000cae:	e796      	b.n	8000bde <HAL_GPIO_Init+0xfe>
          tmp |= iocurrent;
 8000cb0:	9901      	ldr	r1, [sp, #4]
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	e78b      	b.n	8000bce <HAL_GPIO_Init+0xee>
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	40b9      	lsls	r1, r7
 8000cba:	430e      	orrs	r6, r1
 8000cbc:	e77d      	b.n	8000bba <HAL_GPIO_Init+0xda>
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	40b9      	lsls	r1, r7
 8000cc2:	430e      	orrs	r6, r1
 8000cc4:	e779      	b.n	8000bba <HAL_GPIO_Init+0xda>
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40021800 	.word	0x40021800
 8000ccc:	50000400 	.word	0x50000400
 8000cd0:	50000800 	.word	0x50000800
 8000cd4:	50001400 	.word	0x50001400

08000cd8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000cd8:	6900      	ldr	r0, [r0, #16]
 8000cda:	4008      	ands	r0, r1
 8000cdc:	1e43      	subs	r3, r0, #1
 8000cde:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000ce0:	b2c0      	uxtb	r0, r0
}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cea:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cec:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000cee:	e7fc      	b.n	8000cea <HAL_GPIO_WritePin+0x6>

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	d100      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x8>
 8000cf6:	e0c9      	b.n	8000e8c <HAL_RCC_OscConfig+0x19c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf8:	6803      	ldr	r3, [r0, #0]
 8000cfa:	07da      	lsls	r2, r3, #31
 8000cfc:	d52c      	bpl.n	8000d58 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cfe:	2238      	movs	r2, #56	; 0x38
 8000d00:	4da3      	ldr	r5, [pc, #652]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000d02:	68a9      	ldr	r1, [r5, #8]
 8000d04:	400a      	ands	r2, r1

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000d06:	2a08      	cmp	r2, #8
 8000d08:	d100      	bne.n	8000d0c <HAL_RCC_OscConfig+0x1c>
 8000d0a:	e101      	b.n	8000f10 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	6843      	ldr	r3, [r0, #4]
 8000d10:	0252      	lsls	r2, r2, #9
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d100      	bne.n	8000d18 <HAL_RCC_OscConfig+0x28>
 8000d16:	e0bb      	b.n	8000e90 <HAL_RCC_OscConfig+0x1a0>
 8000d18:	21a0      	movs	r1, #160	; 0xa0
 8000d1a:	02c9      	lsls	r1, r1, #11
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d100      	bne.n	8000d22 <HAL_RCC_OscConfig+0x32>
 8000d20:	e125      	b.n	8000f6e <HAL_RCC_OscConfig+0x27e>
 8000d22:	682a      	ldr	r2, [r5, #0]
 8000d24:	499b      	ldr	r1, [pc, #620]	; (8000f94 <HAL_RCC_OscConfig+0x2a4>)
 8000d26:	400a      	ands	r2, r1
 8000d28:	602a      	str	r2, [r5, #0]
 8000d2a:	682a      	ldr	r2, [r5, #0]
 8000d2c:	499a      	ldr	r1, [pc, #616]	; (8000f98 <HAL_RCC_OscConfig+0x2a8>)
 8000d2e:	400a      	ands	r2, r1
 8000d30:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d000      	beq.n	8000d38 <HAL_RCC_OscConfig+0x48>
 8000d36:	e0ae      	b.n	8000e96 <HAL_RCC_OscConfig+0x1a6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d38:	f7ff fe5c 	bl	80009f4 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d3c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d3e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d40:	02bf      	lsls	r7, r7, #10
 8000d42:	e005      	b.n	8000d50 <HAL_RCC_OscConfig+0x60>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fe56 	bl	80009f4 <HAL_GetTick>
 8000d48:	1b80      	subs	r0, r0, r6
 8000d4a:	2864      	cmp	r0, #100	; 0x64
 8000d4c:	d900      	bls.n	8000d50 <HAL_RCC_OscConfig+0x60>
 8000d4e:	e0dd      	b.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	423b      	tst	r3, r7
 8000d54:	d1f6      	bne.n	8000d44 <HAL_RCC_OscConfig+0x54>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	079a      	lsls	r2, r3, #30
 8000d5a:	d52b      	bpl.n	8000db4 <HAL_RCC_OscConfig+0xc4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d5c:	2238      	movs	r2, #56	; 0x38
 8000d5e:	4d8c      	ldr	r5, [pc, #560]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000d60:	68ab      	ldr	r3, [r5, #8]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000d62:	421a      	tst	r2, r3
 8000d64:	d100      	bne.n	8000d68 <HAL_RCC_OscConfig+0x78>
 8000d66:	e06f      	b.n	8000e48 <HAL_RCC_OscConfig+0x158>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d68:	68e3      	ldr	r3, [r4, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <HAL_RCC_OscConfig+0x80>
 8000d6e:	e0ad      	b.n	8000ecc <HAL_RCC_OscConfig+0x1dc>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	4a8a      	ldr	r2, [pc, #552]	; (8000f9c <HAL_RCC_OscConfig+0x2ac>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d74:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d76:	4013      	ands	r3, r2
 8000d78:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d7a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	682a      	ldr	r2, [r5, #0]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4313      	orrs	r3, r2
 8000d88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fe33 	bl	80009f4 <HAL_GetTick>
 8000d8e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d90:	e005      	b.n	8000d9e <HAL_RCC_OscConfig+0xae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d92:	f7ff fe2f 	bl	80009f4 <HAL_GetTick>
 8000d96:	1b80      	subs	r0, r0, r6
 8000d98:	2802      	cmp	r0, #2
 8000d9a:	d900      	bls.n	8000d9e <HAL_RCC_OscConfig+0xae>
 8000d9c:	e0b6      	b.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	423b      	tst	r3, r7
 8000da2:	d0f6      	beq.n	8000d92 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	686a      	ldr	r2, [r5, #4]
 8000da6:	6963      	ldr	r3, [r4, #20]
 8000da8:	497d      	ldr	r1, [pc, #500]	; (8000fa0 <HAL_RCC_OscConfig+0x2b0>)
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	400a      	ands	r2, r1
 8000dae:	4313      	orrs	r3, r2
 8000db0:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	071a      	lsls	r2, r3, #28
 8000db6:	d42b      	bmi.n	8000e10 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db8:	2204      	movs	r2, #4
 8000dba:	421a      	tst	r2, r3
 8000dbc:	d026      	beq.n	8000e0c <HAL_RCC_OscConfig+0x11c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000dbe:	2338      	movs	r3, #56	; 0x38
 8000dc0:	4d73      	ldr	r5, [pc, #460]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000dc2:	68a9      	ldr	r1, [r5, #8]
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	d100      	bne.n	8000dcc <HAL_RCC_OscConfig+0xdc>
 8000dca:	e096      	b.n	8000efa <HAL_RCC_OscConfig+0x20a>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	68a3      	ldr	r3, [r4, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d100      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xe4>
 8000dd2:	e0b9      	b.n	8000f48 <HAL_RCC_OscConfig+0x258>
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0xea>
 8000dd8:	e0d2      	b.n	8000f80 <HAL_RCC_OscConfig+0x290>
 8000dda:	2001      	movs	r0, #1
 8000ddc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8000dde:	4381      	bics	r1, r0
 8000de0:	65e9      	str	r1, [r5, #92]	; 0x5c
 8000de2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8000de4:	4391      	bics	r1, r2
 8000de6:	65e9      	str	r1, [r5, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d000      	beq.n	8000dee <HAL_RCC_OscConfig+0xfe>
 8000dec:	e0af      	b.n	8000f4e <HAL_RCC_OscConfig+0x25e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dee:	f7ff fe01 	bl	80009f4 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000df2:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8000df4:	0004      	movs	r4, r0
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	4f6b      	ldr	r7, [pc, #428]	; (8000fa4 <HAL_RCC_OscConfig+0x2b4>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000df8:	e005      	b.n	8000e06 <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fdfb 	bl	80009f4 <HAL_GetTick>
 8000dfe:	1b00      	subs	r0, r0, r4
 8000e00:	42b8      	cmp	r0, r7
 8000e02:	d900      	bls.n	8000e06 <HAL_RCC_OscConfig+0x116>
 8000e04:	e082      	b.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000e06:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000e08:	421e      	tst	r6, r3
 8000e0a:	d1f6      	bne.n	8000dfa <HAL_RCC_OscConfig+0x10a>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8000e0c:	2000      	movs	r0, #0
}
 8000e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000e10:	2238      	movs	r2, #56	; 0x38
 8000e12:	4d5f      	ldr	r5, [pc, #380]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000e14:	68a9      	ldr	r1, [r5, #8]
 8000e16:	400a      	ands	r2, r1
 8000e18:	2a18      	cmp	r2, #24
 8000e1a:	d04d      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x1c8>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e1c:	69a3      	ldr	r3, [r4, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d07f      	beq.n	8000f22 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_LSI_ENABLE();
 8000e22:	2201      	movs	r2, #1
 8000e24:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e26:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fde2 	bl	80009f4 <HAL_GetTick>
 8000e30:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e32:	e004      	b.n	8000e3e <HAL_RCC_OscConfig+0x14e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fdde 	bl	80009f4 <HAL_GetTick>
 8000e38:	1b80      	subs	r0, r0, r6
 8000e3a:	2802      	cmp	r0, #2
 8000e3c:	d866      	bhi.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e3e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8000e40:	421f      	tst	r7, r3
 8000e42:	d0f7      	beq.n	8000e34 <HAL_RCC_OscConfig+0x144>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	e7b7      	b.n	8000db8 <HAL_RCC_OscConfig+0xc8>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	055b      	lsls	r3, r3, #21
 8000e4c:	d502      	bpl.n	8000e54 <HAL_RCC_OscConfig+0x164>
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01b      	beq.n	8000e8c <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e54:	4b4e      	ldr	r3, [pc, #312]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000e56:	6962      	ldr	r2, [r4, #20]
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	4851      	ldr	r0, [pc, #324]	; (8000fa0 <HAL_RCC_OscConfig+0x2b0>)
 8000e5c:	0212      	lsls	r2, r2, #8
 8000e5e:	4001      	ands	r1, r0
 8000e60:	430a      	orrs	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	494d      	ldr	r1, [pc, #308]	; (8000f9c <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	6921      	ldr	r1, [r4, #16]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <HAL_RCC_OscConfig+0x2b8>)
 8000e74:	049b      	lsls	r3, r3, #18
 8000e76:	0f5b      	lsrs	r3, r3, #29
 8000e78:	40da      	lsrs	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_RCC_OscConfig+0x2bc>)
 8000e7e:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_RCC_OscConfig+0x2c0>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f7ff fd78 	bl	8000978 <HAL_InitTick>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d031      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x200>
    return HAL_ERROR;
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	e7be      	b.n	8000e0e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	682a      	ldr	r2, [r5, #0]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e96:	f7ff fdad 	bl	80009f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e9a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e9c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e9e:	4f3c      	ldr	r7, [pc, #240]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000ea0:	02b6      	lsls	r6, r6, #10
 8000ea2:	e004      	b.n	8000eae <HAL_RCC_OscConfig+0x1be>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fda6 	bl	80009f4 <HAL_GetTick>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	2864      	cmp	r0, #100	; 0x64
 8000eac:	d82e      	bhi.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4233      	tst	r3, r6
 8000eb2:	d0f7      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x1b4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	e74f      	b.n	8000d58 <HAL_RCC_OscConfig+0x68>
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000eb8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8000eba:	0792      	lsls	r2, r2, #30
 8000ebc:	d400      	bmi.n	8000ec0 <HAL_RCC_OscConfig+0x1d0>
 8000ebe:	e77b      	b.n	8000db8 <HAL_RCC_OscConfig+0xc8>
 8000ec0:	69a2      	ldr	r2, [r4, #24]
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	d000      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x1d8>
 8000ec6:	e777      	b.n	8000db8 <HAL_RCC_OscConfig+0xc8>
    return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
 8000eca:	e7a0      	b.n	8000e0e <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	4a39      	ldr	r2, [pc, #228]	; (8000fb4 <HAL_RCC_OscConfig+0x2c4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ed0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fd8d 	bl	80009f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eda:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8000edc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ede:	e004      	b.n	8000eea <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fd88 	bl	80009f4 <HAL_GetTick>
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	2802      	cmp	r0, #2
 8000ee8:	d810      	bhi.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	423b      	tst	r3, r7
 8000eee:	d1f7      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1f0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	071a      	lsls	r2, r3, #28
 8000ef4:	d400      	bmi.n	8000ef8 <HAL_RCC_OscConfig+0x208>
 8000ef6:	e75f      	b.n	8000db8 <HAL_RCC_OscConfig+0xc8>
 8000ef8:	e78a      	b.n	8000e10 <HAL_RCC_OscConfig+0x120>
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000efa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000efc:	079b      	lsls	r3, r3, #30
 8000efe:	d400      	bmi.n	8000f02 <HAL_RCC_OscConfig+0x212>
 8000f00:	e784      	b.n	8000e0c <HAL_RCC_OscConfig+0x11c>
 8000f02:	68a0      	ldr	r0, [r4, #8]
 8000f04:	4243      	negs	r3, r0
 8000f06:	4158      	adcs	r0, r3
    return HAL_ERROR;
 8000f08:	b2c0      	uxtb	r0, r0
 8000f0a:	e780      	b.n	8000e0e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e77e      	b.n	8000e0e <HAL_RCC_OscConfig+0x11e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	682a      	ldr	r2, [r5, #0]
 8000f12:	0392      	lsls	r2, r2, #14
 8000f14:	d400      	bmi.n	8000f18 <HAL_RCC_OscConfig+0x228>
 8000f16:	e71f      	b.n	8000d58 <HAL_RCC_OscConfig+0x68>
 8000f18:	6842      	ldr	r2, [r0, #4]
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d000      	beq.n	8000f20 <HAL_RCC_OscConfig+0x230>
 8000f1e:	e71b      	b.n	8000d58 <HAL_RCC_OscConfig+0x68>
 8000f20:	e7b4      	b.n	8000e8c <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_LSI_DISABLE();
 8000f22:	2201      	movs	r2, #1
 8000f24:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f26:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8000f28:	4393      	bics	r3, r2
 8000f2a:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fd62 	bl	80009f4 <HAL_GetTick>
 8000f30:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f32:	e004      	b.n	8000f3e <HAL_RCC_OscConfig+0x24e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fd5e 	bl	80009f4 <HAL_GetTick>
 8000f38:	1b80      	subs	r0, r0, r6
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d8e6      	bhi.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f3e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8000f40:	421f      	tst	r7, r3
 8000f42:	d1f7      	bne.n	8000f34 <HAL_RCC_OscConfig+0x244>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	e737      	b.n	8000db8 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fd51 	bl	80009f4 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f52:	2502      	movs	r5, #2
        tickstart = HAL_GetTick();
 8000f54:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f56:	4e0e      	ldr	r6, [pc, #56]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f58:	4f12      	ldr	r7, [pc, #72]	; (8000fa4 <HAL_RCC_OscConfig+0x2b4>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f5a:	e004      	b.n	8000f66 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fd4a 	bl	80009f4 <HAL_GetTick>
 8000f60:	1b00      	subs	r0, r0, r4
 8000f62:	42b8      	cmp	r0, r7
 8000f64:	d8d2      	bhi.n	8000f0c <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f66:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8000f68:	421d      	tst	r5, r3
 8000f6a:	d0f7      	beq.n	8000f5c <HAL_RCC_OscConfig+0x26c>
 8000f6c:	e74e      	b.n	8000e0c <HAL_RCC_OscConfig+0x11c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	6829      	ldr	r1, [r5, #0]
 8000f72:	02db      	lsls	r3, r3, #11
 8000f74:	430b      	orrs	r3, r1
 8000f76:	602b      	str	r3, [r5, #0]
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7e:	e78a      	b.n	8000e96 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000f82:	431a      	orrs	r2, r3
 8000f84:	65ea      	str	r2, [r5, #92]	; 0x5c
 8000f86:	2201      	movs	r2, #1
 8000f88:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	65eb      	str	r3, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f8e:	e7de      	b.n	8000f4e <HAL_RCC_OscConfig+0x25e>
 8000f90:	40021000 	.word	0x40021000
 8000f94:	fffeffff 	.word	0xfffeffff
 8000f98:	fffbffff 	.word	0xfffbffff
 8000f9c:	ffffc7ff 	.word	0xffffc7ff
 8000fa0:	ffff80ff 	.word	0xffff80ff
 8000fa4:	00001388 	.word	0x00001388
 8000fa8:	02dc6c00 	.word	0x02dc6c00
 8000fac:	20000028 	.word	0x20000028
 8000fb0:	20000030 	.word	0x20000030
 8000fb4:	fffffeff 	.word	0xfffffeff

08000fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	46ce      	mov	lr, r9
 8000fbc:	4647      	mov	r7, r8
 8000fbe:	0005      	movs	r5, r0
 8000fc0:	000c      	movs	r4, r1
 8000fc2:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_ClockConfig+0x12>
 8000fc8:	e080      	b.n	80010cc <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fca:	2207      	movs	r2, #7
 8000fcc:	4e65      	ldr	r6, [pc, #404]	; (8001164 <HAL_RCC_ClockConfig+0x1ac>)
 8000fce:	6833      	ldr	r3, [r6, #0]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	d200      	bcs.n	8000fd8 <HAL_RCC_ClockConfig+0x20>
 8000fd6:	e07e      	b.n	80010d6 <HAL_RCC_ClockConfig+0x11e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	079a      	lsls	r2, r3, #30
 8000fdc:	d510      	bpl.n	8001000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fde:	075a      	lsls	r2, r3, #29
 8000fe0:	d507      	bpl.n	8000ff2 <HAL_RCC_ClockConfig+0x3a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000fe2:	4861      	ldr	r0, [pc, #388]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 8000fe4:	4961      	ldr	r1, [pc, #388]	; (800116c <HAL_RCC_ClockConfig+0x1b4>)
 8000fe6:	6882      	ldr	r2, [r0, #8]
 8000fe8:	4011      	ands	r1, r2
 8000fea:	22b0      	movs	r2, #176	; 0xb0
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	6082      	str	r2, [r0, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff2:	495d      	ldr	r1, [pc, #372]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 8000ff4:	485e      	ldr	r0, [pc, #376]	; (8001170 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff6:	688a      	ldr	r2, [r1, #8]
 8000ff8:	4002      	ands	r2, r0
 8000ffa:	68e8      	ldr	r0, [r5, #12]
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	608a      	str	r2, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001000:	07db      	lsls	r3, r3, #31
 8001002:	d529      	bpl.n	8001058 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001004:	211c      	movs	r1, #28
 8001006:	4a58      	ldr	r2, [pc, #352]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 8001008:	6813      	ldr	r3, [r2, #0]
 800100a:	438b      	bics	r3, r1
 800100c:	68a9      	ldr	r1, [r5, #8]
 800100e:	430b      	orrs	r3, r1
 8001010:	6013      	str	r3, [r2, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001012:	6869      	ldr	r1, [r5, #4]
 8001014:	2901      	cmp	r1, #1
 8001016:	d056      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_ERROR;
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001018:	2900      	cmp	r1, #0
 800101a:	d000      	beq.n	800101e <HAL_RCC_ClockConfig+0x66>
 800101c:	e079      	b.n	8001112 <HAL_RCC_ClockConfig+0x15a>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	055b      	lsls	r3, r3, #21
 8001022:	d553      	bpl.n	80010cc <HAL_RCC_ClockConfig+0x114>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001024:	2207      	movs	r2, #7
 8001026:	4e50      	ldr	r6, [pc, #320]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 8001028:	68b3      	ldr	r3, [r6, #8]
 800102a:	4393      	bics	r3, r2
 800102c:	430b      	orrs	r3, r1
 800102e:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001030:	f7ff fce0 	bl	80009f4 <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001034:	2338      	movs	r3, #56	; 0x38
 8001036:	4698      	mov	r8, r3
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	4b4e      	ldr	r3, [pc, #312]	; (8001174 <HAL_RCC_ClockConfig+0x1bc>)
    tickstart = HAL_GetTick();
 800103a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800103c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103e:	e004      	b.n	800104a <HAL_RCC_ClockConfig+0x92>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff fcd8 	bl	80009f4 <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4548      	cmp	r0, r9
 8001048:	d85b      	bhi.n	8001102 <HAL_RCC_ClockConfig+0x14a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104a:	4643      	mov	r3, r8
 800104c:	68b2      	ldr	r2, [r6, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	686b      	ldr	r3, [r5, #4]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	429a      	cmp	r2, r3
 8001056:	d1f3      	bne.n	8001040 <HAL_RCC_ClockConfig+0x88>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001058:	2207      	movs	r2, #7
 800105a:	4e42      	ldr	r6, [pc, #264]	; (8001164 <HAL_RCC_ClockConfig+0x1ac>)
 800105c:	6833      	ldr	r3, [r6, #0]
 800105e:	4013      	ands	r3, r2
 8001060:	42a3      	cmp	r3, r4
 8001062:	d85d      	bhi.n	8001120 <HAL_RCC_ClockConfig+0x168>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	075b      	lsls	r3, r3, #29
 8001068:	d506      	bpl.n	8001078 <HAL_RCC_ClockConfig+0xc0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 800106c:	4942      	ldr	r1, [pc, #264]	; (8001178 <HAL_RCC_ClockConfig+0x1c0>)
 800106e:	6893      	ldr	r3, [r2, #8]
 8001070:	400b      	ands	r3, r1
 8001072:	6929      	ldr	r1, [r5, #16]
 8001074:	430b      	orrs	r3, r1
 8001076:	6093      	str	r3, [r2, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001078:	2338      	movs	r3, #56	; 0x38
 800107a:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 800107c:	6891      	ldr	r1, [r2, #8]
 800107e:	420b      	tst	r3, r1
 8001080:	d041      	beq.n	8001106 <HAL_RCC_ClockConfig+0x14e>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001082:	6891      	ldr	r1, [r2, #8]
 8001084:	4019      	ands	r1, r3
 8001086:	2908      	cmp	r1, #8
 8001088:	d062      	beq.n	8001150 <HAL_RCC_ClockConfig+0x198>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800108a:	6891      	ldr	r1, [r2, #8]
 800108c:	4019      	ands	r1, r3
 800108e:	2920      	cmp	r1, #32
 8001090:	d065      	beq.n	800115e <HAL_RCC_ClockConfig+0x1a6>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001092:	6892      	ldr	r2, [r2, #8]
 8001094:	4013      	ands	r3, r2
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
  }
  else
  {
    sysclockfreq = 0U;
 8001096:	3b18      	subs	r3, #24
 8001098:	425a      	negs	r2, r3
 800109a:	4153      	adcs	r3, r2
 800109c:	22fa      	movs	r2, #250	; 0xfa
 800109e:	425b      	negs	r3, r3
 80010a0:	01d2      	lsls	r2, r2, #7
 80010a2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80010a4:	4a30      	ldr	r2, [pc, #192]	; (8001168 <HAL_RCC_ClockConfig+0x1b0>)
 80010a6:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	6892      	ldr	r2, [r2, #8]
 80010aa:	0512      	lsls	r2, r2, #20
 80010ac:	0f12      	lsrs	r2, r2, #28
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	5852      	ldr	r2, [r2, r1]
 80010b2:	211f      	movs	r1, #31
 80010b4:	400a      	ands	r2, r1
 80010b6:	40d3      	lsrs	r3, r2
 80010b8:	4a31      	ldr	r2, [pc, #196]	; (8001180 <HAL_RCC_ClockConfig+0x1c8>)
 80010ba:	6013      	str	r3, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <HAL_RCC_ClockConfig+0x1cc>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f7ff fc5a 	bl	8000978 <HAL_InitTick>
 80010c4:	e003      	b.n	80010ce <HAL_RCC_ClockConfig+0x116>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	039b      	lsls	r3, r3, #14
 80010ca:	d4ab      	bmi.n	8001024 <HAL_RCC_ClockConfig+0x6c>
    return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
}
 80010ce:	bcc0      	pop	{r6, r7}
 80010d0:	46b9      	mov	r9, r7
 80010d2:	46b0      	mov	r8, r6
 80010d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	6833      	ldr	r3, [r6, #0]
 80010d8:	4393      	bics	r3, r2
 80010da:	430b      	orrs	r3, r1
 80010dc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80010de:	f7ff fc89 	bl	80009f4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e2:	2307      	movs	r3, #7
 80010e4:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_RCC_ClockConfig+0x1bc>)
    tickstart = HAL_GetTick();
 80010e8:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ea:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010ec:	4642      	mov	r2, r8
 80010ee:	6833      	ldr	r3, [r6, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	42a3      	cmp	r3, r4
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_ClockConfig+0x140>
 80010f6:	e76f      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff fc7c 	bl	80009f4 <HAL_GetTick>
 80010fc:	1bc0      	subs	r0, r0, r7
 80010fe:	4548      	cmp	r0, r9
 8001100:	d9f4      	bls.n	80010ec <HAL_RCC_ClockConfig+0x134>
        return HAL_TIMEOUT;
 8001102:	2003      	movs	r0, #3
 8001104:	e7e3      	b.n	80010ce <HAL_RCC_ClockConfig+0x116>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001106:	6812      	ldr	r2, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_RCC_ClockConfig+0x1d0>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800110a:	0492      	lsls	r2, r2, #18
 800110c:	0f52      	lsrs	r2, r2, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800110e:	40d3      	lsrs	r3, r2
 8001110:	e7c8      	b.n	80010a4 <HAL_RCC_ClockConfig+0xec>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001112:	2903      	cmp	r1, #3
 8001114:	d01e      	beq.n	8001154 <HAL_RCC_ClockConfig+0x19c>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001116:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001118:	079b      	lsls	r3, r3, #30
 800111a:	d500      	bpl.n	800111e <HAL_RCC_ClockConfig+0x166>
 800111c:	e782      	b.n	8001024 <HAL_RCC_ClockConfig+0x6c>
 800111e:	e7d5      	b.n	80010cc <HAL_RCC_ClockConfig+0x114>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001120:	6833      	ldr	r3, [r6, #0]
 8001122:	4393      	bics	r3, r2
 8001124:	4323      	orrs	r3, r4
 8001126:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001128:	f7ff fc64 	bl	80009f4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800112c:	2307      	movs	r3, #7
 800112e:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_RCC_ClockConfig+0x1bc>)
    tickstart = HAL_GetTick();
 8001132:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001134:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001136:	4642      	mov	r2, r8
 8001138:	6833      	ldr	r3, [r6, #0]
 800113a:	4013      	ands	r3, r2
 800113c:	42a3      	cmp	r3, r4
 800113e:	d100      	bne.n	8001142 <HAL_RCC_ClockConfig+0x18a>
 8001140:	e790      	b.n	8001064 <HAL_RCC_ClockConfig+0xac>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001142:	f7ff fc57 	bl	80009f4 <HAL_GetTick>
 8001146:	1bc0      	subs	r0, r0, r7
 8001148:	4548      	cmp	r0, r9
 800114a:	d9f4      	bls.n	8001136 <HAL_RCC_ClockConfig+0x17e>
        return HAL_TIMEOUT;
 800114c:	2003      	movs	r0, #3
 800114e:	e7be      	b.n	80010ce <HAL_RCC_ClockConfig+0x116>
    sysclockfreq = HSE_VALUE;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_RCC_ClockConfig+0x1d4>)
 8001152:	e7a7      	b.n	80010a4 <HAL_RCC_ClockConfig+0xec>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001154:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001156:	079b      	lsls	r3, r3, #30
 8001158:	d500      	bpl.n	800115c <HAL_RCC_ClockConfig+0x1a4>
 800115a:	e763      	b.n	8001024 <HAL_RCC_ClockConfig+0x6c>
 800115c:	e7b6      	b.n	80010cc <HAL_RCC_ClockConfig+0x114>
    sysclockfreq = LSE_VALUE;
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	e79f      	b.n	80010a4 <HAL_RCC_ClockConfig+0xec>
 8001164:	40022000 	.word	0x40022000
 8001168:	40021000 	.word	0x40021000
 800116c:	ffff84ff 	.word	0xffff84ff
 8001170:	fffff0ff 	.word	0xfffff0ff
 8001174:	00001388 	.word	0x00001388
 8001178:	ffff8fff 	.word	0xffff8fff
 800117c:	08001864 	.word	0x08001864
 8001180:	20000028 	.word	0x20000028
 8001184:	20000030 	.word	0x20000030
 8001188:	02dc6c00 	.word	0x02dc6c00
 800118c:	007a1200 	.word	0x007a1200

08001190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001190:	b510      	push	{r4, lr}
 8001192:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001194:	d05f      	beq.n	8001256 <HAL_TIM_Base_Init+0xc6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001196:	233d      	movs	r3, #61	; 0x3d
 8001198:	5cc3      	ldrb	r3, [r0, r3]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d04c      	beq.n	800123a <HAL_TIM_Base_Init+0xaa>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011a0:	233d      	movs	r3, #61	; 0x3d
 80011a2:	2202      	movs	r2, #2
 80011a4:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011a6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011a8:	492c      	ldr	r1, [pc, #176]	; (800125c <HAL_TIM_Base_Init+0xcc>)
  tmpcr1 = TIMx->CR1;
 80011aa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011ac:	428a      	cmp	r2, r1
 80011ae:	d015      	beq.n	80011dc <HAL_TIM_Base_Init+0x4c>
 80011b0:	492b      	ldr	r1, [pc, #172]	; (8001260 <HAL_TIM_Base_Init+0xd0>)
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d046      	beq.n	8001244 <HAL_TIM_Base_Init+0xb4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011b6:	492b      	ldr	r1, [pc, #172]	; (8001264 <HAL_TIM_Base_Init+0xd4>)
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d047      	beq.n	800124c <HAL_TIM_Base_Init+0xbc>
 80011bc:	492a      	ldr	r1, [pc, #168]	; (8001268 <HAL_TIM_Base_Init+0xd8>)
 80011be:	428a      	cmp	r2, r1
 80011c0:	d010      	beq.n	80011e4 <HAL_TIM_Base_Init+0x54>
 80011c2:	492a      	ldr	r1, [pc, #168]	; (800126c <HAL_TIM_Base_Init+0xdc>)
 80011c4:	428a      	cmp	r2, r1
 80011c6:	d00d      	beq.n	80011e4 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	438b      	bics	r3, r1
 80011cc:	69a1      	ldr	r1, [r4, #24]
 80011ce:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80011d0:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d2:	68e3      	ldr	r3, [r4, #12]
 80011d4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011da:	e012      	b.n	8001202 <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011dc:	2170      	movs	r1, #112	; 0x70
 80011de:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80011e0:	68a1      	ldr	r1, [r4, #8]
 80011e2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80011e4:	4922      	ldr	r1, [pc, #136]	; (8001270 <HAL_TIM_Base_Init+0xe0>)
 80011e6:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011e8:	6921      	ldr	r1, [r4, #16]
 80011ea:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	438b      	bics	r3, r1
 80011f0:	69a1      	ldr	r1, [r4, #24]
 80011f2:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80011f4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011f6:	68e3      	ldr	r3, [r4, #12]
 80011f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011fe:	6963      	ldr	r3, [r4, #20]
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001202:	2301      	movs	r3, #1
 8001204:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001206:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800120a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800120c:	3a0a      	subs	r2, #10
 800120e:	54a3      	strb	r3, [r4, r2]
 8001210:	3201      	adds	r2, #1
 8001212:	54a3      	strb	r3, [r4, r2]
 8001214:	3201      	adds	r2, #1
 8001216:	54a3      	strb	r3, [r4, r2]
 8001218:	3201      	adds	r2, #1
 800121a:	54a3      	strb	r3, [r4, r2]
 800121c:	3201      	adds	r2, #1
 800121e:	54a3      	strb	r3, [r4, r2]
 8001220:	3201      	adds	r2, #1
 8001222:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001224:	3201      	adds	r2, #1
 8001226:	54a3      	strb	r3, [r4, r2]
 8001228:	3201      	adds	r2, #1
 800122a:	54a3      	strb	r3, [r4, r2]
 800122c:	3201      	adds	r2, #1
 800122e:	54a3      	strb	r3, [r4, r2]
 8001230:	3201      	adds	r2, #1
 8001232:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001234:	3a0a      	subs	r2, #10
 8001236:	54a3      	strb	r3, [r4, r2]
}
 8001238:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800123a:	333c      	adds	r3, #60	; 0x3c
 800123c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800123e:	f7ff fb35 	bl	80008ac <HAL_TIM_Base_MspInit>
 8001242:	e7ad      	b.n	80011a0 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001244:	2170      	movs	r1, #112	; 0x70
 8001246:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001248:	68a1      	ldr	r1, [r4, #8]
 800124a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800124c:	4908      	ldr	r1, [pc, #32]	; (8001270 <HAL_TIM_Base_Init+0xe0>)
 800124e:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001250:	6921      	ldr	r1, [r4, #16]
 8001252:	430b      	orrs	r3, r1
 8001254:	e7b8      	b.n	80011c8 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 8001256:	2001      	movs	r0, #1
 8001258:	e7ee      	b.n	8001238 <HAL_TIM_Base_Init+0xa8>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	40012c00 	.word	0x40012c00
 8001260:	40000400 	.word	0x40000400
 8001264:	40002000 	.word	0x40002000
 8001268:	40014400 	.word	0x40014400
 800126c:	40014800 	.word	0x40014800
 8001270:	fffffcff 	.word	0xfffffcff

08001274 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001274:	223d      	movs	r2, #61	; 0x3d
 8001276:	5c81      	ldrb	r1, [r0, r2]
{
 8001278:	0003      	movs	r3, r0
    return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800127c:	2901      	cmp	r1, #1
 800127e:	d10f      	bne.n	80012a0 <HAL_TIM_Base_Start_IT+0x2c>
  htim->State = HAL_TIM_STATE_BUSY;
 8001280:	3101      	adds	r1, #1
 8001282:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4302      	orrs	r2, r0
 800128a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_TIM_Base_Start_IT+0x50>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_TIM_Base_Start_IT+0x2e>
 8001292:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_TIM_Base_Start_IT+0x54>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d004      	beq.n	80012a2 <HAL_TIM_Base_Start_IT+0x2e>
    __HAL_TIM_ENABLE(htim);
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4310      	orrs	r0, r2
 800129c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800129e:	2000      	movs	r0, #0
}
 80012a0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <HAL_TIM_Base_Start_IT+0x58>)
 80012a6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012a8:	2a06      	cmp	r2, #6
 80012aa:	d008      	beq.n	80012be <HAL_TIM_Base_Start_IT+0x4a>
 80012ac:	3907      	subs	r1, #7
 80012ae:	428a      	cmp	r2, r1
 80012b0:	d005      	beq.n	80012be <HAL_TIM_Base_Start_IT+0x4a>
      __HAL_TIM_ENABLE(htim);
 80012b2:	2101      	movs	r1, #1
 80012b4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80012b6:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e7f0      	b.n	80012a0 <HAL_TIM_Base_Start_IT+0x2c>
  return HAL_OK;
 80012be:	2000      	movs	r0, #0
 80012c0:	e7ee      	b.n	80012a0 <HAL_TIM_Base_Start_IT+0x2c>
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	40000400 	.word	0x40000400
 80012cc:	00010007 	.word	0x00010007

080012d0 <HAL_TIM_OC_MspInit>:
 80012d0:	4770      	bx	lr
 80012d2:	46c0      	nop			; (mov r8, r8)

080012d4 <HAL_TIM_OC_Init>:
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80012d8:	d05f      	beq.n	800139a <HAL_TIM_OC_Init+0xc6>
  if (htim->State == HAL_TIM_STATE_RESET)
 80012da:	233d      	movs	r3, #61	; 0x3d
 80012dc:	5cc3      	ldrb	r3, [r0, r3]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d04c      	beq.n	800137e <HAL_TIM_OC_Init+0xaa>
  htim->State = HAL_TIM_STATE_BUSY;
 80012e4:	233d      	movs	r3, #61	; 0x3d
 80012e6:	2202      	movs	r2, #2
 80012e8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80012ea:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012ec:	492c      	ldr	r1, [pc, #176]	; (80013a0 <HAL_TIM_OC_Init+0xcc>)
  tmpcr1 = TIMx->CR1;
 80012ee:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d015      	beq.n	8001320 <HAL_TIM_OC_Init+0x4c>
 80012f4:	492b      	ldr	r1, [pc, #172]	; (80013a4 <HAL_TIM_OC_Init+0xd0>)
 80012f6:	428a      	cmp	r2, r1
 80012f8:	d046      	beq.n	8001388 <HAL_TIM_OC_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012fa:	492b      	ldr	r1, [pc, #172]	; (80013a8 <HAL_TIM_OC_Init+0xd4>)
 80012fc:	428a      	cmp	r2, r1
 80012fe:	d047      	beq.n	8001390 <HAL_TIM_OC_Init+0xbc>
 8001300:	492a      	ldr	r1, [pc, #168]	; (80013ac <HAL_TIM_OC_Init+0xd8>)
 8001302:	428a      	cmp	r2, r1
 8001304:	d010      	beq.n	8001328 <HAL_TIM_OC_Init+0x54>
 8001306:	492a      	ldr	r1, [pc, #168]	; (80013b0 <HAL_TIM_OC_Init+0xdc>)
 8001308:	428a      	cmp	r2, r1
 800130a:	d00d      	beq.n	8001328 <HAL_TIM_OC_Init+0x54>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	438b      	bics	r3, r1
 8001310:	69a1      	ldr	r1, [r4, #24]
 8001312:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001314:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001316:	68e3      	ldr	r3, [r4, #12]
 8001318:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800131e:	e012      	b.n	8001346 <HAL_TIM_OC_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001320:	2170      	movs	r1, #112	; 0x70
 8001322:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001324:	68a1      	ldr	r1, [r4, #8]
 8001326:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001328:	4922      	ldr	r1, [pc, #136]	; (80013b4 <HAL_TIM_OC_Init+0xe0>)
 800132a:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800132c:	6921      	ldr	r1, [r4, #16]
 800132e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	438b      	bics	r3, r1
 8001334:	69a1      	ldr	r1, [r4, #24]
 8001336:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001338:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800133e:	6863      	ldr	r3, [r4, #4]
 8001340:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001342:	6963      	ldr	r3, [r4, #20]
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001346:	2301      	movs	r3, #1
 8001348:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800134a:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 800134c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800134e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001350:	3a0a      	subs	r2, #10
 8001352:	54a3      	strb	r3, [r4, r2]
 8001354:	3201      	adds	r2, #1
 8001356:	54a3      	strb	r3, [r4, r2]
 8001358:	3201      	adds	r2, #1
 800135a:	54a3      	strb	r3, [r4, r2]
 800135c:	3201      	adds	r2, #1
 800135e:	54a3      	strb	r3, [r4, r2]
 8001360:	3201      	adds	r2, #1
 8001362:	54a3      	strb	r3, [r4, r2]
 8001364:	3201      	adds	r2, #1
 8001366:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001368:	3201      	adds	r2, #1
 800136a:	54a3      	strb	r3, [r4, r2]
 800136c:	3201      	adds	r2, #1
 800136e:	54a3      	strb	r3, [r4, r2]
 8001370:	3201      	adds	r2, #1
 8001372:	54a3      	strb	r3, [r4, r2]
 8001374:	3201      	adds	r2, #1
 8001376:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001378:	3a0a      	subs	r2, #10
 800137a:	54a3      	strb	r3, [r4, r2]
}
 800137c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800137e:	333c      	adds	r3, #60	; 0x3c
 8001380:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 8001382:	f7ff ffa5 	bl	80012d0 <HAL_TIM_OC_MspInit>
 8001386:	e7ad      	b.n	80012e4 <HAL_TIM_OC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001388:	2170      	movs	r1, #112	; 0x70
 800138a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800138c:	68a1      	ldr	r1, [r4, #8]
 800138e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001390:	4908      	ldr	r1, [pc, #32]	; (80013b4 <HAL_TIM_OC_Init+0xe0>)
 8001392:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001394:	6921      	ldr	r1, [r4, #16]
 8001396:	430b      	orrs	r3, r1
 8001398:	e7b8      	b.n	800130c <HAL_TIM_OC_Init+0x38>
    return HAL_ERROR;
 800139a:	2001      	movs	r0, #1
 800139c:	e7ee      	b.n	800137c <HAL_TIM_OC_Init+0xa8>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40012c00 	.word	0x40012c00
 80013a4:	40000400 	.word	0x40000400
 80013a8:	40002000 	.word	0x40002000
 80013ac:	40014400 	.word	0x40014400
 80013b0:	40014800 	.word	0x40014800
 80013b4:	fffffcff 	.word	0xfffffcff

080013b8 <HAL_TIM_OC_ConfigChannel>:
{
 80013b8:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80013ba:	203c      	movs	r0, #60	; 0x3c
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80013be:	5c1c      	ldrb	r4, [r3, r0]
 80013c0:	2c01      	cmp	r4, #1
 80013c2:	d100      	bne.n	80013c6 <HAL_TIM_OC_ConfigChannel+0xe>
 80013c4:	e11b      	b.n	80015fe <HAL_TIM_OC_ConfigChannel+0x246>
 80013c6:	2401      	movs	r4, #1
 80013c8:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80013ca:	2a14      	cmp	r2, #20
 80013cc:	d803      	bhi.n	80013d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80013ce:	488d      	ldr	r0, [pc, #564]	; (8001604 <HAL_TIM_OC_ConfigChannel+0x24c>)
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	5882      	ldr	r2, [r0, r2]
 80013d4:	4697      	mov	pc, r2
 80013d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80013d8:	223c      	movs	r2, #60	; 0x3c
 80013da:	2100      	movs	r1, #0
 80013dc:	5499      	strb	r1, [r3, r2]
}
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80013e0:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80013e2:	4c89      	ldr	r4, [pc, #548]	; (8001608 <HAL_TIM_OC_ConfigChannel+0x250>)
 80013e4:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80013e6:	4d89      	ldr	r5, [pc, #548]	; (800160c <HAL_TIM_OC_ConfigChannel+0x254>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80013e8:	4020      	ands	r0, r4
 80013ea:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80013ec:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80013ee:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80013f0:	6d54      	ldr	r4, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80013f2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013f4:	680d      	ldr	r5, [r1, #0]
 80013f6:	022d      	lsls	r5, r5, #8
 80013f8:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80013fa:	4c85      	ldr	r4, [pc, #532]	; (8001610 <HAL_TIM_OC_ConfigChannel+0x258>)
 80013fc:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80013fe:	6888      	ldr	r0, [r1, #8]
 8001400:	0500      	lsls	r0, r0, #20
 8001402:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001404:	4c83      	ldr	r4, [pc, #524]	; (8001614 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8001406:	42a2      	cmp	r2, r4
 8001408:	d100      	bne.n	800140c <HAL_TIM_OC_ConfigChannel+0x54>
 800140a:	e0c0      	b.n	800158e <HAL_TIM_OC_ConfigChannel+0x1d6>
 800140c:	4c82      	ldr	r4, [pc, #520]	; (8001618 <HAL_TIM_OC_ConfigChannel+0x260>)
 800140e:	42a2      	cmp	r2, r4
 8001410:	d100      	bne.n	8001414 <HAL_TIM_OC_ConfigChannel+0x5c>
 8001412:	e0bc      	b.n	800158e <HAL_TIM_OC_ConfigChannel+0x1d6>
 8001414:	4c81      	ldr	r4, [pc, #516]	; (800161c <HAL_TIM_OC_ConfigChannel+0x264>)
 8001416:	42a2      	cmp	r2, r4
 8001418:	d100      	bne.n	800141c <HAL_TIM_OC_ConfigChannel+0x64>
 800141a:	e0b8      	b.n	800158e <HAL_TIM_OC_ConfigChannel+0x1d6>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800141c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800141e:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001420:	6555      	str	r5, [r2, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001422:	65d1      	str	r1, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001424:	6210      	str	r0, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8001426:	2000      	movs	r0, #0
}
 8001428:	e7d6      	b.n	80013d8 <HAL_TIM_OC_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800142a:	2401      	movs	r4, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800142c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800142e:	4f7c      	ldr	r7, [pc, #496]	; (8001620 <HAL_TIM_OC_ConfigChannel+0x268>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001430:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001432:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001434:	43a0      	bics	r0, r4
 8001436:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001438:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800143a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800143c:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800143e:	403c      	ands	r4, r7
  tmpccer &= ~TIM_CCER_CC1P;
 8001440:	2702      	movs	r7, #2
  tmpccmrx |= OC_Config->OCMode;
 8001442:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC1P;
 8001444:	43b8      	bics	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8001446:	688d      	ldr	r5, [r1, #8]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001448:	4f72      	ldr	r7, [pc, #456]	; (8001614 <HAL_TIM_OC_ConfigChannel+0x25c>)
  tmpccer |= OC_Config->OCPolarity;
 800144a:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800144c:	42ba      	cmp	r2, r7
 800144e:	d100      	bne.n	8001452 <HAL_TIM_OC_ConfigChannel+0x9a>
 8001450:	e0c8      	b.n	80015e4 <HAL_TIM_OC_ConfigChannel+0x22c>
 8001452:	4d71      	ldr	r5, [pc, #452]	; (8001618 <HAL_TIM_OC_ConfigChannel+0x260>)
 8001454:	42aa      	cmp	r2, r5
 8001456:	d100      	bne.n	800145a <HAL_TIM_OC_ConfigChannel+0xa2>
 8001458:	e0c4      	b.n	80015e4 <HAL_TIM_OC_ConfigChannel+0x22c>
 800145a:	4d70      	ldr	r5, [pc, #448]	; (800161c <HAL_TIM_OC_ConfigChannel+0x264>)
 800145c:	42aa      	cmp	r2, r5
 800145e:	d100      	bne.n	8001462 <HAL_TIM_OC_ConfigChannel+0xaa>
 8001460:	e0c0      	b.n	80015e4 <HAL_TIM_OC_ConfigChannel+0x22c>
  TIMx->CCR1 = OC_Config->Pulse;
 8001462:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001464:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001466:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001468:	6351      	str	r1, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800146a:	6210      	str	r0, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800146c:	2000      	movs	r0, #0
}
 800146e:	e7b3      	b.n	80013d8 <HAL_TIM_OC_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001470:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001472:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001474:	4d6b      	ldr	r5, [pc, #428]	; (8001624 <HAL_TIM_OC_ConfigChannel+0x26c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001476:	6a10      	ldr	r0, [r2, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001478:	4f66      	ldr	r7, [pc, #408]	; (8001614 <HAL_TIM_OC_ConfigChannel+0x25c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800147a:	43a0      	bics	r0, r4
 800147c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800147e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001480:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001482:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001484:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001486:	680d      	ldr	r5, [r1, #0]
 8001488:	022d      	lsls	r5, r5, #8
 800148a:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 800148c:	2420      	movs	r4, #32
 800148e:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001490:	688c      	ldr	r4, [r1, #8]
 8001492:	0124      	lsls	r4, r4, #4
 8001494:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001496:	42ba      	cmp	r2, r7
 8001498:	d100      	bne.n	800149c <HAL_TIM_OC_ConfigChannel+0xe4>
 800149a:	e093      	b.n	80015c4 <HAL_TIM_OC_ConfigChannel+0x20c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800149c:	4f5e      	ldr	r7, [pc, #376]	; (8001618 <HAL_TIM_OC_ConfigChannel+0x260>)
 800149e:	42ba      	cmp	r2, r7
 80014a0:	d100      	bne.n	80014a4 <HAL_TIM_OC_ConfigChannel+0xec>
 80014a2:	e097      	b.n	80015d4 <HAL_TIM_OC_ConfigChannel+0x21c>
 80014a4:	485d      	ldr	r0, [pc, #372]	; (800161c <HAL_TIM_OC_ConfigChannel+0x264>)
 80014a6:	4282      	cmp	r2, r0
 80014a8:	d100      	bne.n	80014ac <HAL_TIM_OC_ConfigChannel+0xf4>
 80014aa:	e093      	b.n	80015d4 <HAL_TIM_OC_ConfigChannel+0x21c>
  TIMx->CCR2 = OC_Config->Pulse;
 80014ac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80014ae:	6056      	str	r6, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2000      	movs	r0, #0
  TIMx->CCMR1 = tmpccmrx;
 80014b2:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80014b4:	6391      	str	r1, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80014b6:	6214      	str	r4, [r2, #32]
}
 80014b8:	e78e      	b.n	80013d8 <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014ba:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014bc:	4c5a      	ldr	r4, [pc, #360]	; (8001628 <HAL_TIM_OC_ConfigChannel+0x270>)
 80014be:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80014c0:	4e57      	ldr	r6, [pc, #348]	; (8001620 <HAL_TIM_OC_ConfigChannel+0x268>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014c2:	4020      	ands	r0, r4
 80014c4:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80014c6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80014c8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80014ca:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx |= OC_Config->OCMode;
 80014cc:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80014ce:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 80014d0:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 80014d2:	4c56      	ldr	r4, [pc, #344]	; (800162c <HAL_TIM_OC_ConfigChannel+0x274>)
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014d4:	4e4f      	ldr	r6, [pc, #316]	; (8001614 <HAL_TIM_OC_ConfigChannel+0x25c>)
  tmpccer &= ~TIM_CCER_CC3P;
 80014d6:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014d8:	688c      	ldr	r4, [r1, #8]
 80014da:	0224      	lsls	r4, r4, #8
 80014dc:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014de:	42b2      	cmp	r2, r6
 80014e0:	d061      	beq.n	80015a6 <HAL_TIM_OC_ConfigChannel+0x1ee>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014e2:	4e4d      	ldr	r6, [pc, #308]	; (8001618 <HAL_TIM_OC_ConfigChannel+0x260>)
 80014e4:	42b2      	cmp	r2, r6
 80014e6:	d065      	beq.n	80015b4 <HAL_TIM_OC_ConfigChannel+0x1fc>
 80014e8:	484c      	ldr	r0, [pc, #304]	; (800161c <HAL_TIM_OC_ConfigChannel+0x264>)
 80014ea:	4282      	cmp	r2, r0
 80014ec:	d062      	beq.n	80015b4 <HAL_TIM_OC_ConfigChannel+0x1fc>
  TIMx->CCR3 = OC_Config->Pulse;
 80014ee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80014f0:	6055      	str	r5, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f2:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 80014f4:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80014f6:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80014f8:	6214      	str	r4, [r2, #32]
}
 80014fa:	e76d      	b.n	80013d8 <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80014fc:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80014fe:	4c4c      	ldr	r4, [pc, #304]	; (8001630 <HAL_TIM_OC_ConfigChannel+0x278>)
 8001500:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001502:	4d48      	ldr	r5, [pc, #288]	; (8001624 <HAL_TIM_OC_ConfigChannel+0x26c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001504:	4020      	ands	r0, r4
 8001506:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001508:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800150a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800150c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800150e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001510:	680d      	ldr	r5, [r1, #0]
 8001512:	022d      	lsls	r5, r5, #8
 8001514:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001516:	4c47      	ldr	r4, [pc, #284]	; (8001634 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001518:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800151a:	6888      	ldr	r0, [r1, #8]
 800151c:	0300      	lsls	r0, r0, #12
 800151e:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001520:	4c3c      	ldr	r4, [pc, #240]	; (8001614 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8001522:	42a2      	cmp	r2, r4
 8001524:	d039      	beq.n	800159a <HAL_TIM_OC_ConfigChannel+0x1e2>
 8001526:	4c3c      	ldr	r4, [pc, #240]	; (8001618 <HAL_TIM_OC_ConfigChannel+0x260>)
 8001528:	42a2      	cmp	r2, r4
 800152a:	d036      	beq.n	800159a <HAL_TIM_OC_ConfigChannel+0x1e2>
 800152c:	4c3b      	ldr	r4, [pc, #236]	; (800161c <HAL_TIM_OC_ConfigChannel+0x264>)
 800152e:	42a2      	cmp	r2, r4
 8001530:	d033      	beq.n	800159a <HAL_TIM_OC_ConfigChannel+0x1e2>
  TIMx->CCR4 = OC_Config->Pulse;
 8001532:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001534:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001536:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001538:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800153a:	6210      	str	r0, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800153c:	2000      	movs	r0, #0
}
 800153e:	e74b      	b.n	80013d8 <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001540:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001542:	4c3d      	ldr	r4, [pc, #244]	; (8001638 <HAL_TIM_OC_ConfigChannel+0x280>)
 8001544:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001546:	4d3d      	ldr	r5, [pc, #244]	; (800163c <HAL_TIM_OC_ConfigChannel+0x284>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001548:	4020      	ands	r0, r4
 800154a:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800154c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800154e:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001550:	6d54      	ldr	r4, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001552:	4025      	ands	r5, r4
  tmpccmrx |= OC_Config->OCMode;
 8001554:	680c      	ldr	r4, [r1, #0]
 8001556:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC5P;
 8001558:	4c39      	ldr	r4, [pc, #228]	; (8001640 <HAL_TIM_OC_ConfigChannel+0x288>)
 800155a:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800155c:	6888      	ldr	r0, [r1, #8]
 800155e:	0400      	lsls	r0, r0, #16
 8001560:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001562:	4c2c      	ldr	r4, [pc, #176]	; (8001614 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8001564:	42a2      	cmp	r2, r4
 8001566:	d00c      	beq.n	8001582 <HAL_TIM_OC_ConfigChannel+0x1ca>
 8001568:	4c2b      	ldr	r4, [pc, #172]	; (8001618 <HAL_TIM_OC_ConfigChannel+0x260>)
 800156a:	42a2      	cmp	r2, r4
 800156c:	d009      	beq.n	8001582 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800156e:	4c2b      	ldr	r4, [pc, #172]	; (800161c <HAL_TIM_OC_ConfigChannel+0x264>)
 8001570:	42a2      	cmp	r2, r4
 8001572:	d006      	beq.n	8001582 <HAL_TIM_OC_ConfigChannel+0x1ca>
  TIMx->CCR5 = OC_Config->Pulse;
 8001574:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001576:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001578:	6555      	str	r5, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800157a:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800157c:	6210      	str	r0, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2000      	movs	r0, #0
}
 8001580:	e72a      	b.n	80013d8 <HAL_TIM_OC_ConfigChannel+0x20>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001582:	4c2d      	ldr	r4, [pc, #180]	; (8001638 <HAL_TIM_OC_ConfigChannel+0x280>)
 8001584:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001586:	694e      	ldr	r6, [r1, #20]
 8001588:	0236      	lsls	r6, r6, #8
 800158a:	4326      	orrs	r6, r4
 800158c:	e7f2      	b.n	8001574 <HAL_TIM_OC_ConfigChannel+0x1bc>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800158e:	4c2d      	ldr	r4, [pc, #180]	; (8001644 <HAL_TIM_OC_ConfigChannel+0x28c>)
 8001590:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001592:	694e      	ldr	r6, [r1, #20]
 8001594:	02b6      	lsls	r6, r6, #10
 8001596:	4326      	orrs	r6, r4
 8001598:	e740      	b.n	800141c <HAL_TIM_OC_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800159a:	4c2b      	ldr	r4, [pc, #172]	; (8001648 <HAL_TIM_OC_ConfigChannel+0x290>)
 800159c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800159e:	694e      	ldr	r6, [r1, #20]
 80015a0:	01b6      	lsls	r6, r6, #6
 80015a2:	4326      	orrs	r6, r4
 80015a4:	e7c5      	b.n	8001532 <HAL_TIM_OC_ConfigChannel+0x17a>
    tmpccer &= ~TIM_CCER_CC3NP;
 80015a6:	4829      	ldr	r0, [pc, #164]	; (800164c <HAL_TIM_OC_ConfigChannel+0x294>)
 80015a8:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80015aa:	68cc      	ldr	r4, [r1, #12]
 80015ac:	0224      	lsls	r4, r4, #8
 80015ae:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <HAL_TIM_OC_ConfigChannel+0x298>)
 80015b2:	4004      	ands	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015b4:	4827      	ldr	r0, [pc, #156]	; (8001654 <HAL_TIM_OC_ConfigChannel+0x29c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015b6:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015b8:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015ba:	698d      	ldr	r5, [r1, #24]
 80015bc:	4335      	orrs	r5, r6
 80015be:	012d      	lsls	r5, r5, #4
 80015c0:	4305      	orrs	r5, r0
 80015c2:	e794      	b.n	80014ee <HAL_TIM_OC_ConfigChannel+0x136>
    tmpccer &= ~TIM_CCER_CC2NP;
 80015c4:	2080      	movs	r0, #128	; 0x80
 80015c6:	4384      	bics	r4, r0
 80015c8:	0020      	movs	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015ca:	68cc      	ldr	r4, [r1, #12]
 80015cc:	0124      	lsls	r4, r4, #4
 80015ce:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 80015d0:	2040      	movs	r0, #64	; 0x40
 80015d2:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <HAL_TIM_OC_ConfigChannel+0x2a0>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015d6:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80015d8:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015da:	698e      	ldr	r6, [r1, #24]
 80015dc:	433e      	orrs	r6, r7
 80015de:	00b6      	lsls	r6, r6, #2
 80015e0:	4306      	orrs	r6, r0
 80015e2:	e763      	b.n	80014ac <HAL_TIM_OC_ConfigChannel+0xf4>
    tmpccer &= ~TIM_CCER_CC1NP;
 80015e4:	2508      	movs	r5, #8
 80015e6:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 80015e8:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80015ea:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80015ec:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80015ee:	2504      	movs	r5, #4
 80015f0:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015f2:	4d1a      	ldr	r5, [pc, #104]	; (800165c <HAL_TIM_OC_ConfigChannel+0x2a4>)
 80015f4:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80015f6:	694e      	ldr	r6, [r1, #20]
 80015f8:	433e      	orrs	r6, r7
 80015fa:	432e      	orrs	r6, r5
 80015fc:	e731      	b.n	8001462 <HAL_TIM_OC_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 80015fe:	2002      	movs	r0, #2
 8001600:	e6ed      	b.n	80013de <HAL_TIM_OC_ConfigChannel+0x26>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	080018a4 	.word	0x080018a4
 8001608:	ffefffff 	.word	0xffefffff
 800160c:	feff8fff 	.word	0xfeff8fff
 8001610:	ffdfffff 	.word	0xffdfffff
 8001614:	40012c00 	.word	0x40012c00
 8001618:	40014400 	.word	0x40014400
 800161c:	40014800 	.word	0x40014800
 8001620:	fffeff8c 	.word	0xfffeff8c
 8001624:	feff8cff 	.word	0xfeff8cff
 8001628:	fffffeff 	.word	0xfffffeff
 800162c:	fffffdff 	.word	0xfffffdff
 8001630:	ffffefff 	.word	0xffffefff
 8001634:	ffffdfff 	.word	0xffffdfff
 8001638:	fffeffff 	.word	0xfffeffff
 800163c:	fffeff8f 	.word	0xfffeff8f
 8001640:	fffdffff 	.word	0xfffdffff
 8001644:	fffbffff 	.word	0xfffbffff
 8001648:	ffffbfff 	.word	0xffffbfff
 800164c:	fffff7ff 	.word	0xfffff7ff
 8001650:	fffffbff 	.word	0xfffffbff
 8001654:	ffffcfff 	.word	0xffffcfff
 8001658:	fffff3ff 	.word	0xfffff3ff
 800165c:	fffffcff 	.word	0xfffffcff

08001660 <HAL_TIM_OC_DelayElapsedCallback>:
 8001660:	4770      	bx	lr
 8001662:	46c0      	nop			; (mov r8, r8)

08001664 <HAL_TIM_IC_CaptureCallback>:
 8001664:	4770      	bx	lr
 8001666:	46c0      	nop			; (mov r8, r8)

08001668 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001668:	4770      	bx	lr
 800166a:	46c0      	nop			; (mov r8, r8)

0800166c <HAL_TIM_TriggerCallback>:
 800166c:	4770      	bx	lr
 800166e:	46c0      	nop			; (mov r8, r8)

08001670 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001670:	2202      	movs	r2, #2
 8001672:	6803      	ldr	r3, [r0, #0]
{
 8001674:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001676:	6919      	ldr	r1, [r3, #16]
{
 8001678:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800167a:	420a      	tst	r2, r1
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x16>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800167e:	68d9      	ldr	r1, [r3, #12]
 8001680:	420a      	tst	r2, r1
 8001682:	d000      	beq.n	8001686 <HAL_TIM_IRQHandler+0x16>
 8001684:	e06e      	b.n	8001764 <HAL_TIM_IRQHandler+0xf4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001686:	2204      	movs	r2, #4
 8001688:	6919      	ldr	r1, [r3, #16]
 800168a:	420a      	tst	r2, r1
 800168c:	d002      	beq.n	8001694 <HAL_TIM_IRQHandler+0x24>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800168e:	68d9      	ldr	r1, [r3, #12]
 8001690:	420a      	tst	r2, r1
 8001692:	d154      	bne.n	800173e <HAL_TIM_IRQHandler+0xce>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001694:	2208      	movs	r2, #8
 8001696:	6919      	ldr	r1, [r3, #16]
 8001698:	420a      	tst	r2, r1
 800169a:	d002      	beq.n	80016a2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	420a      	tst	r2, r1
 80016a0:	d13c      	bne.n	800171c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016a2:	2210      	movs	r2, #16
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	420a      	tst	r2, r1
 80016a8:	d002      	beq.n	80016b0 <HAL_TIM_IRQHandler+0x40>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016aa:	68d9      	ldr	r1, [r3, #12]
 80016ac:	420a      	tst	r2, r1
 80016ae:	d122      	bne.n	80016f6 <HAL_TIM_IRQHandler+0x86>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016b0:	2201      	movs	r2, #1
 80016b2:	6919      	ldr	r1, [r3, #16]
 80016b4:	420a      	tst	r2, r1
 80016b6:	d002      	beq.n	80016be <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	420a      	tst	r2, r1
 80016bc:	d168      	bne.n	8001790 <HAL_TIM_IRQHandler+0x120>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	6919      	ldr	r1, [r3, #16]
 80016c2:	420a      	tst	r2, r1
 80016c4:	d002      	beq.n	80016cc <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c6:	68d9      	ldr	r1, [r3, #12]
 80016c8:	420a      	tst	r2, r1
 80016ca:	d168      	bne.n	800179e <HAL_TIM_IRQHandler+0x12e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	05d2      	lsls	r2, r2, #23
 80016d0:	d502      	bpl.n	80016d8 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	0612      	lsls	r2, r2, #24
 80016d6:	d46a      	bmi.n	80017ae <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	420a      	tst	r2, r1
 80016de:	d002      	beq.n	80016e6 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016e0:	68d9      	ldr	r1, [r3, #12]
 80016e2:	420a      	tst	r2, r1
 80016e4:	d16a      	bne.n	80017bc <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016e6:	2220      	movs	r2, #32
 80016e8:	6919      	ldr	r1, [r3, #16]
 80016ea:	420a      	tst	r2, r1
 80016ec:	d002      	beq.n	80016f4 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016ee:	68d9      	ldr	r1, [r3, #12]
 80016f0:	420a      	tst	r2, r1
 80016f2:	d147      	bne.n	8001784 <HAL_TIM_IRQHandler+0x114>
}
 80016f4:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016f6:	3a21      	subs	r2, #33	; 0x21
 80016f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016fa:	3219      	adds	r2, #25
 80016fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	23c0      	movs	r3, #192	; 0xc0
 8001702:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001704:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001706:	421a      	tst	r2, r3
 8001708:	d168      	bne.n	80017dc <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	f7ff ffa9 	bl	8001660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170e:	0020      	movs	r0, r4
 8001710:	f7ff ffaa 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001714:	2300      	movs	r3, #0
 8001716:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	e7c9      	b.n	80016b0 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800171c:	3a11      	subs	r2, #17
 800171e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001720:	320d      	adds	r2, #13
 8001722:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001724:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001726:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001728:	079b      	lsls	r3, r3, #30
 800172a:	d154      	bne.n	80017d6 <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172c:	f7ff ff98 	bl	8001660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001730:	0020      	movs	r0, r4
 8001732:	f7ff ff99 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001736:	2300      	movs	r3, #0
 8001738:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	e7b1      	b.n	80016a2 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800173e:	3a09      	subs	r2, #9
 8001740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001742:	3207      	adds	r2, #7
 8001744:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800174c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800174e:	421a      	tst	r2, r3
 8001750:	d13e      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001752:	f7ff ff85 	bl	8001660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001756:	0020      	movs	r0, r4
 8001758:	f7ff ff86 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175c:	2300      	movs	r3, #0
 800175e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	e797      	b.n	8001694 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001764:	3a05      	subs	r2, #5
 8001766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001768:	3204      	adds	r2, #4
 800176a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	079b      	lsls	r3, r3, #30
 8001770:	d12b      	bne.n	80017ca <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001772:	f7ff ff75 	bl	8001660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001776:	0020      	movs	r0, r4
 8001778:	f7ff ff76 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177c:	2300      	movs	r3, #0
 800177e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	e780      	b.n	8001686 <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001784:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8001786:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001788:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800178a:	f000 f82d 	bl	80017e8 <HAL_TIMEx_CommutCallback>
}
 800178e:	e7b1      	b.n	80016f4 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001790:	3a03      	subs	r2, #3
 8001792:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001794:	0020      	movs	r0, r4
 8001796:	f7ff f86d 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	e78f      	b.n	80016be <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800179e:	3a02      	subs	r2, #2
 80017a0:	3aff      	subs	r2, #255	; 0xff
 80017a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80017a4:	0020      	movs	r0, r4
 80017a6:	f000 f821 	bl	80017ec <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	e78e      	b.n	80016cc <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 80017b0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80017b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80017b4:	f000 f81c 	bl	80017f0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	e78d      	b.n	80016d8 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017bc:	3a81      	subs	r2, #129	; 0x81
 80017be:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80017c0:	0020      	movs	r0, r4
 80017c2:	f7ff ff53 	bl	800166c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	e78d      	b.n	80016e6 <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 80017ca:	f7ff ff4b 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 80017ce:	e7d5      	b.n	800177c <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 80017d0:	f7ff ff48 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 80017d4:	e7c2      	b.n	800175c <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	f7ff ff45 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 80017da:	e7ac      	b.n	8001736 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 80017dc:	f7ff ff42 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 80017e0:	e798      	b.n	8001714 <HAL_TIM_IRQHandler+0xa4>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	fffffeff 	.word	0xfffffeff

080017e8 <HAL_TIMEx_CommutCallback>:
 80017e8:	4770      	bx	lr
 80017ea:	46c0      	nop			; (mov r8, r8)

080017ec <HAL_TIMEx_BreakCallback>:
 80017ec:	4770      	bx	lr
 80017ee:	46c0      	nop			; (mov r8, r8)

080017f0 <HAL_TIMEx_Break2Callback>:
 80017f0:	4770      	bx	lr
 80017f2:	46c0      	nop			; (mov r8, r8)

080017f4 <__libc_init_array>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	2600      	movs	r6, #0
 80017f8:	4d0c      	ldr	r5, [pc, #48]	; (800182c <__libc_init_array+0x38>)
 80017fa:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <__libc_init_array+0x3c>)
 80017fc:	1b64      	subs	r4, r4, r5
 80017fe:	10a4      	asrs	r4, r4, #2
 8001800:	42a6      	cmp	r6, r4
 8001802:	d109      	bne.n	8001818 <__libc_init_array+0x24>
 8001804:	2600      	movs	r6, #0
 8001806:	f000 f821 	bl	800184c <_init>
 800180a:	4d0a      	ldr	r5, [pc, #40]	; (8001834 <__libc_init_array+0x40>)
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <__libc_init_array+0x44>)
 800180e:	1b64      	subs	r4, r4, r5
 8001810:	10a4      	asrs	r4, r4, #2
 8001812:	42a6      	cmp	r6, r4
 8001814:	d105      	bne.n	8001822 <__libc_init_array+0x2e>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	00b3      	lsls	r3, r6, #2
 800181a:	58eb      	ldr	r3, [r5, r3]
 800181c:	4798      	blx	r3
 800181e:	3601      	adds	r6, #1
 8001820:	e7ee      	b.n	8001800 <__libc_init_array+0xc>
 8001822:	00b3      	lsls	r3, r6, #2
 8001824:	58eb      	ldr	r3, [r5, r3]
 8001826:	4798      	blx	r3
 8001828:	3601      	adds	r6, #1
 800182a:	e7f2      	b.n	8001812 <__libc_init_array+0x1e>
 800182c:	080018f8 	.word	0x080018f8
 8001830:	080018f8 	.word	0x080018f8
 8001834:	080018f8 	.word	0x080018f8
 8001838:	080018fc 	.word	0x080018fc

0800183c <memset>:
 800183c:	0003      	movs	r3, r0
 800183e:	1882      	adds	r2, r0, r2
 8001840:	4293      	cmp	r3, r2
 8001842:	d100      	bne.n	8001846 <memset+0xa>
 8001844:	4770      	bx	lr
 8001846:	7019      	strb	r1, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	e7f9      	b.n	8001840 <memset+0x4>

0800184c <_init>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr

08001858 <_fini>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr
